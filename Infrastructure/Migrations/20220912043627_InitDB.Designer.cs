// <auto-generated />
using System;
using Domain.Shares.Classes;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220912043627_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Registration", "RoleId")
                        .IsUnique()
                        .HasFilter("verified = true and deleted_at = null");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7861),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7861),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7869),
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7870),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7877),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7877),
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7883),
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7883),
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7889),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7889),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7896),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7896),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7902),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7902),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7907),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7908),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7914),
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7914),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7921),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7921),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7926),
                            CreatedBy = 0,
                            Registration = "khoandse140977@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7927),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7932),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7933),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7938),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7938),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7944),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7944),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7950),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7950),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7991),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7991),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("93f42e9c-30d2-44c1-bab0-4b14b01bdb4e"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7400),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7401),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("efd8c4dd-01c7-4ec6-b0bd-ff589625c224"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7415),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7415),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("75709067-7e7d-4c27-a2ff-93b9df4179f6"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7422),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7422),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("49182200-c89a-49d1-96c9-7d4d49a5afa0"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7439),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7440),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("b83a693a-4e6d-4c30-b713-a0671cebcb58"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7447),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7448),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("2f3e07d8-f0bb-4ff5-ba45-a6598cefa46d"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7456),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7456),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("26d4def9-730b-4790-bde0-f4dc044eb9bc"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7463),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7463),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("210b9ea0-b568-49cf-be97-a7d25494502a"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7470),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7470),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            Code = new Guid("dc1a498a-3c6f-44d1-bcb7-4d00bab88d74"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7476),
                            CreatedBy = 0,
                            Path = "promotion/285640182_5344668362254863_4230282646432249568_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7476),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            Code = new Guid("acb92608-f98f-4cdc-9802-cb159be9e436"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7484),
                            CreatedBy = 0,
                            Path = "promotion/292718124_1043378296364294_8747140355237126885_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7484),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            Code = new Guid("1308348c-dc6c-40c6-98b0-0718234e5ef8"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7491),
                            CreatedBy = 0,
                            Path = "promotion/300978304_2290809087749954_8259423704505319939_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7491),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("8348a9f7-6c87-4b81-a5fe-df30e2e4d3a9"))
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DaySchedule>("Days")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("days");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_price");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<Location>("From")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("from");

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_shared");

                    b.Property<int>("Option")
                        .HasColumnType("integer")
                        .HasColumnName("option");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<Location>("To")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("to");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_price");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("feedback");

                    b.Property<int>("MessageRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("message_room_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("DriverId");

                    b.HasIndex("MessageRoomId")
                        .IsUnique();

                    b.ToTable("booking_details", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<double>("MaxDecrease")
                        .HasColumnType("double precision")
                        .HasColumnName("max_decrease");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "HELLO2022",
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8005),
                            CreatedBy = 0,
                            Details = "Promotion for new user: Discount 20% with max decrease 200k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.20000000000000001,
                            FileId = 9,
                            MaxDecrease = 200000.0,
                            Name = "New User Promotion",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8006),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "BDAY2022",
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8016),
                            CreatedBy = 0,
                            Details = "Promotion for September: Discount 10% with max decrease 150k for the booking with minimum total price 200k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 10,
                            MaxDecrease = 150000.0,
                            Name = "Beautiful Month",
                            Status = 1,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8016),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "HOLIDAY",
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8022),
                            CreatedBy = 0,
                            Details = "Promotion for 2/9 Holiday: Discount 30% with max decrease 300k for the booking with minimum total price 1000k.",
                            DiscountPercentage = 0.29999999999999999,
                            MaxDecrease = 300000.0,
                            Name = "Holiday Promotion",
                            Status = 1,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8022),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "ABC",
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8028),
                            CreatedBy = 0,
                            Details = "Promotion for users booking alot: Discount 10% with max decrease 300k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 11,
                            MaxDecrease = 300000.0,
                            Name = "ABC Promotion",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8029),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("MinTickets")
                        .HasColumnType("integer")
                        .HasColumnName("min_tickets");

                    b.Property<float?>("MinTotalPrice")
                        .HasColumnType("real")
                        .HasColumnName("min_total_price");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PromotionId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<int?>("TotalUsage")
                        .HasColumnType("integer")
                        .HasColumnName("total_usage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UsagePerUser")
                        .HasColumnType("integer")
                        .HasColumnName("usage_per_user");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId")
                        .IsUnique();

                    b.ToTable("promotion_conditions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8042),
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8042),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8144),
                            CreatedBy = 0,
                            MinTotalPrice = 200000f,
                            PromotionId = 2,
                            TotalUsage = 50,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8144),
                            UpdatedBy = 0,
                            UsagePerUser = 4,
                            ValidFrom = new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8166),
                            CreatedBy = 0,
                            MinTotalPrice = 1000000f,
                            PromotionId = 3,
                            TotalUsage = 50,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8167),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2022, 9, 2, 23, 59, 59, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8185),
                            CreatedBy = 0,
                            MinTickets = 20,
                            MinTotalPrice = 500000f,
                            PromotionId = 4,
                            TotalUsage = 50,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8185),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<int?>("PromotionConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("used");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PromotionConditionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PromotionId", "UserId")
                        .IsUnique();

                    b.ToTable("promotion_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8204),
                            CreatedBy = 0,
                            ExpiredTime = new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Utc),
                            PromotionId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8204),
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8223),
                            CreatedBy = 0,
                            ExpiredTime = new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Utc),
                            PromotionId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8224),
                            UpdatedBy = 0,
                            Used = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8237),
                            CreatedBy = 0,
                            ExpiredTime = new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Utc),
                            PromotionId = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8237),
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8250),
                            CreatedBy = 0,
                            PromotionId = 2,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(8250),
                            UpdatedBy = 0,
                            Used = 2,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Role for driver",
                            Name = "DRIVER"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Role for booker",
                            Name = "BOOKER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("0d745d14-b83c-4e7d-9b59-a8dbe74ffa7e"))
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("912217ae-a4c4-45a4-b3af-c3253f6b1b34"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7508),
                            CreatedBy = 0,
                            FileId = 1,
                            Gender = 1,
                            Name = "Quach Dai Loi",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7508),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("09eec144-2b3c-45ca-8e16-0583a78f095b"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7520),
                            CreatedBy = 0,
                            FileId = 2,
                            Gender = 1,
                            Name = "Do Trong Dat",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7520),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("72bbceb2-6610-4e12-8ac2-901332aa6608"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7565),
                            CreatedBy = 0,
                            FileId = 3,
                            Gender = 1,
                            Name = "Nguyen Dang Khoa",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7566),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("0165bf53-d100-4833-964f-b70796450eab"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7791),
                            CreatedBy = 0,
                            FileId = 4,
                            Gender = 1,
                            Name = "Than Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7792),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("f675d68c-9889-4402-93f6-cdf0404057bd"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7815),
                            CreatedBy = 0,
                            FileId = 5,
                            Gender = 1,
                            Name = "Loi Quach",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7815),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("97ff65e3-7095-4899-ade1-0fb843f7e41b"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7830),
                            CreatedBy = 0,
                            FileId = 6,
                            Gender = 1,
                            Name = "Dat Do",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7830),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("cfa6c4b8-5283-463a-b44e-385c32d40f8e"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7841),
                            CreatedBy = 0,
                            FileId = 7,
                            Gender = 1,
                            Name = "Khoa Nguyen",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7841),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("61e44e9a-78b9-4bdf-af2f-d8152014d113"),
                            CreatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7850),
                            CreatedBy = 0,
                            FileId = 8,
                            Gender = 1,
                            Name = "Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 9, 12, 4, 36, 26, 876, DateTimeKind.Utc).AddTicks(7850),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("LastSeenTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 9, 12, 4, 36, 26, 873, DateTimeKind.Utc).AddTicks(9534))
                        .HasColumnName("last_seen_time");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("user_rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VerifiedCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("verified_codes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Driver")
                        .WithMany("BookingDetails")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "MessageRoom")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.BookingDetail", "MessageRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Driver");

                    b.Navigation("MessageRoom");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("Promotion")
                        .HasForeignKey("Domain.Entities.Promotion", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithOne("PromotionCondition")
                        .HasForeignKey("Domain.Entities.PromotionCondition", "PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.HasOne("Domain.Entities.PromotionCondition", null)
                        .WithMany("UserPromotionConditions")
                        .HasForeignKey("PromotionConditionId");

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Navigation("Promotion")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PromotionCondition")
                        .IsRequired();

                    b.Navigation("PromotionUsers");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Navigation("UserPromotionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BookingDetails");

                    b.Navigation("Bookings");

                    b.Navigation("Messages");

                    b.Navigation("PromotionUsers");

                    b.Navigation("UserRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
