// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220829080932_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Registration", "RoleId")
                        .IsUnique()
                        .HasFilter("verified = true");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8941),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8942),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8951),
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8951),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8959),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8959),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8965),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8965),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8972),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8972),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8980),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8981),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8988),
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8988),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8994),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8994),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9001),
                            CreatedBy = 0,
                            Registration = "khoandse140977@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9001),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9009),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9009),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9015),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9016),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9056),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9056),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9064),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9064),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9071),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(9071),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("71de5b78-6d5a-463b-be56-3f6ed23851df"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8719),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8720),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("60d8349d-10b3-4530-9e11-bcb157448819"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8762),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8762),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("6ac9818c-8bd0-467a-9b68-c10edb768831"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8833),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8834),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("46f232cc-c5c2-43d5-846d-ca5f7c49f0e4"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8855),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8855),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("7b5f1baa-eb7c-48f6-aacf-89d6365e92b0"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8874),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8874),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("a94eaa41-47f7-4002-889a-64bf2e4241dd"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8885),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8885),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("eabb2ad3-e8f0-4392-95e4-35173cabbbde"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8904),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8904),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("9569f0ba-5b90-4608-a2af-7603ca3c4efa"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8923),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8923),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("days");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_price");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_shared");

                    b.Property<int>("Option")
                        .HasColumnType("integer")
                        .HasColumnName("option");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_price");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("feedback");

                    b.Property<int>("MessageRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("message_room_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("DriverId");

                    b.HasIndex("MessageRoomId")
                        .IsUnique();

                    b.ToTable("booking_details", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Role for driver",
                            Name = "DRIVER"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Role for booker",
                            Name = "BOOKER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("c9376590-dc46-4765-8103-043f228044b5"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8739),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8741),
                            FileId = 1,
                            Gender = 1,
                            Name = "Quach Dai Loi",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8739),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("ac618d93-5553-4d80-8901-04537f43d30d"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8772),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8773),
                            FileId = 2,
                            Gender = 1,
                            Name = "Do Trong Dat",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8772),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("d9f2382b-fee7-4ada-a667-1b2c91870061"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8845),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8847),
                            FileId = 3,
                            Gender = 1,
                            Name = "Nguyen Dang Khoa",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8845),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("6e9c73ac-aa4c-4851-8d7d-547ae4a49018"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8863),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8867),
                            FileId = 4,
                            Gender = 1,
                            Name = "Than Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8863),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("fc2d9b96-c44f-4f25-973f-a962e1cda690"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8894),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8895),
                            FileId = 6,
                            Gender = 1,
                            Name = "Dat Do",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8894),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("10acceca-0268-4fab-8d9b-8f27d8b0c271"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8913),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8914),
                            FileId = 7,
                            Gender = 1,
                            Name = "Khoa Nguyen",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8913),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("33712a73-fde4-4c23-877f-d80662aa1e5b"),
                            CreatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8932),
                            CreatedBy = 0,
                            DateOfBirth = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8933),
                            FileId = 8,
                            Gender = 1,
                            Name = "Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 8, 9, 31, 951, DateTimeKind.Utc).AddTicks(8932),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("LastSeenTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 8, 29, 8, 9, 31, 949, DateTimeKind.Utc).AddTicks(9715))
                        .HasColumnName("last_seen_time");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("user_rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VerifiedCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("verified_codes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Driver")
                        .WithMany("BookingDetails")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "MessageRoom")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.BookingDetail", "MessageRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Driver");

                    b.Navigation("MessageRoom");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BookingDetails");

                    b.Navigation("Bookings");

                    b.Navigation("Messages");

                    b.Navigation("UserRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
