// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.Shares.Classes;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Registration", "RoleId")
                        .IsUnique()
                        .HasFilter("verified = true and deleted_at = null");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8045), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9306), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8046), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9307), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 1,
                            Verified = true
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8075), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9341), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8075), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9342), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 1,
                            Verified = false
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8083), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9371), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8084), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9372), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = false
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8090), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9381), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8091), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9382), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = true
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8097), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9390), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8098), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9391), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8107), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9400), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8108), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9401), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8115), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9458), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8115), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9459), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8122), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9470), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8122), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9471), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = true
                        },
                        new
                        {
                            Id = 9,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8129), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9479), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8129), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9480), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = true
                        },
                        new
                        {
                            Id = 10,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8137), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9490), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8137), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9491), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8144), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9499), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "khoandse140977@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8145), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9500), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8151), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9508), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8152), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9509), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = true
                        },
                        new
                        {
                            Id = 13,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8158), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9517), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8159), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9518), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = true
                        },
                        new
                        {
                            Id = 14,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8166), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9526), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8166), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9527), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8172), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9535), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8173), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9536), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8183), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9544), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8184), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9545), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = true
                        },
                        new
                        {
                            Id = 17,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8191), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9553), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8192), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9554), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 9,
                            Verified = true
                        },
                        new
                        {
                            Id = 18,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8199), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9563), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8200), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9564), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 9,
                            Verified = true
                        },
                        new
                        {
                            Id = 19,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8207), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9572), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8207), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9573), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 11,
                            Verified = true
                        },
                        new
                        {
                            Id = 20,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8214), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9582), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8215), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9582), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 11,
                            Verified = false
                        },
                        new
                        {
                            Id = 21,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8221), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9593), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8222), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9593), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 10,
                            Verified = true
                        },
                        new
                        {
                            Id = 22,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8229), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9602), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8229), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9603), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 10,
                            Verified = false
                        },
                        new
                        {
                            Id = 23,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8235), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9611), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8236), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9611), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 12,
                            Verified = true
                        },
                        new
                        {
                            Id = 24,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8242), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9620), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 3,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8243), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9621), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 12,
                            Verified = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.AffiliateAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffiliatePartyId")
                        .HasColumnType("integer")
                        .HasColumnName("affiliate_party_type_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<object>("ExtraData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("extra_data");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatePartyId");

                    b.HasIndex("WalletId", "AffiliatePartyId")
                        .IsUnique();

                    b.ToTable("affiliate_accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AffiliateParty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("affiliate_parties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            Code = new Guid("1da6c5b4-48e1-4da6-97d4-397639ffe179"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9089), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Momo",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9090), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6e4dcec2-a91f-4ec6-971b-c11c89558104"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1278), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Momo",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1279), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            Code = new Guid("6dc1c059-0ff4-4a6f-88b0-baf1e37d12e3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9095), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "VNPay",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9095), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("90c194da-b21b-444c-a825-d372f11150a6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1289), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "VNPay",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1290), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            Code = new Guid("81d50043-6a36-4447-9cac-28e70eec2e21"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9097), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "ZaloPay",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9098), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ea9b1cb2-6333-4591-8a48-9512c3dd024e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1292), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "ZaloPay",
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1292), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            Code = new Guid("b3ff0078-7ece-4df7-8a3a-b8b2f8c4a50c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7753), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("c0a7fef2-700d-418c-829c-5c578619f444"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8785), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7764), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8814), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            Code = new Guid("cc3605ea-b103-4fb3-802f-4360e486c5b8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7777), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8dacba3a-15c7-47c6-b967-36ce4f5af0ac"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8832), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7778), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8832), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            Code = new Guid("9e0a5f2f-d4d6-42ea-8e8b-4ba120522aa1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7786), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("b37051cb-91bd-45ba-a288-f31e278e6ceb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8844), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7787), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8844), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            Code = new Guid("f8626910-2726-4dc0-bf76-b720a9fddd41"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7794), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8fa6abde-fbae-4ef0-9ae0-3aadb8bc7deb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8854), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7795), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8855), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            Code = new Guid("c6a95e81-b5dd-4fea-8072-279c79e0aa1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7808), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("f90a4810-5514-40c6-abb0-2c59d7f50029"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8877), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7809), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8878), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            Code = new Guid("cd11ad92-c5e6-4406-b9b2-07f4c4604f49"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7819), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("1c62b49d-7eaf-4914-b28b-b7230c0eb072"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8890), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7820), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8891), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
<<<<<<< HEAD
                            Code = new Guid("5d5f9d45-b3fa-48ff-9121-3dbbd91c79d5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7836), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("f28eb77d-8b2f-4f3d-891d-a1450a6cf467"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8901), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7836), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8902), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
<<<<<<< HEAD
                            Code = new Guid("58ce0549-ff0e-46d9-b781-dd9b35e02616"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7845), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("c364ab6c-966f-40e5-b0a4-dffb52e398f8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8911), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7845), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8912), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
<<<<<<< HEAD
                            Code = new Guid("69b2bf40-dc57-4116-94c4-6dcb908e5a3b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7853), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2fda5fc7-fda0-432a-93db-2ea49922f06b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8921), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "promotion/285640182_5344668362254863_4230282646432249568_n.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7854), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8922), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
<<<<<<< HEAD
                            Code = new Guid("7bbf0091-1578-4c1c-a74d-2c9e6ce5196a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7862), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("57137667-128d-4aa6-89b4-e205be326f40"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8932), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "promotion/292718124_1043378296364294_8747140355237126885_n.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7863), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8933), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
<<<<<<< HEAD
                            Code = new Guid("b067b39b-dc44-4940-ad80-d24843f1b029"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7870), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("0bc6dd40-ff14-4c91-b33b-19d9fcccd530"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8942), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "promotion/300978304_2290809087749954_8259423704505319939_n.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7871), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8943), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
<<<<<<< HEAD
                            Code = new Guid("06334349-5d3b-40d3-894e-2270e322f987"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7878), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8d3865c5-bc17-43e6-a64c-1e08c55df2cf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8952), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "promotion/300978304_2290809087749954_8259423704505319939_n.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7879), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8953), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 13,
<<<<<<< HEAD
                            Code = new Guid("ae1887d6-637d-4871-9224-aaf7484e1fda"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7886), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("0f7b0c6f-eee9-47de-b13a-09a00eb1f1e1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8968), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7887), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(8969), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("banners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
<<<<<<< HEAD
                            Content = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8819), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 9,
                            Priority = 1,
                            Title = "What is Lorem Ipsum?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8819), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Content = "Banner 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(708), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 9,
                            Priority = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(709), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
<<<<<<< HEAD
                            Content = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8823), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 10,
                            Priority = 2,
                            Title = "Why do we use it?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8823), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Content = "Banner 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(718), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 10,
                            Priority = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(719), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
<<<<<<< HEAD
                            Content = "The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8825), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 11,
                            Priority = 3,
                            Title = "Where does it come from?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8825), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Content = "Banner 3",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(720), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 11,
                            Priority = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(721), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
<<<<<<< HEAD
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8826), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 12,
                            Title = "Where can I get some?",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8827), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Content = "Banner 4",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(722), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 12,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(722), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
<<<<<<< HEAD
                        .HasDefaultValue(new Guid("bdb8a235-8677-45ac-b1d2-9bbbf72d7454"))
=======
                        .HasDefaultValue(new Guid("7cad3b1a-e647-43f0-81bf-1995fc99bfcf"))
>>>>>>> booking_datdt
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_price");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<int>("EndRouteStationId")
                        .HasColumnType("integer")
                        .HasColumnName("end_route_station_id");

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_shared");

                    b.Property<int>("Option")
                        .HasColumnType("integer")
                        .HasColumnName("option");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<int>("StartRouteStationId")
                        .HasColumnType("integer")
                        .HasColumnName("start_route_station_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EndRouteStationId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StartRouteStationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_price");

                    b.Property<string>("FeedBack")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("feedback");

                    b.Property<int?>("MessageRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("message_room_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("MessageRoomId")
                        .IsUnique();

                    b.ToTable("booking_details", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingDetailDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_detail_id");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TripStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.HasIndex("DriverId", "BookingDetailId")
                        .IsUnique();

                    b.ToTable("booking_detail_drivers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseDistance")
                        .HasColumnType("integer")
                        .HasColumnName("base_distance");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_per_km");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId")
                        .IsUnique();

                    b.ToTable("fares", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseDistance = 2000,
                            BasePrice = 12000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8891), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 4000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8892), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(844), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 4000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(845), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BaseDistance = 2000,
                            BasePrice = 20000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8901), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 10000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8902), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(859), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 10000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(860), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BaseDistance = 2000,
                            BasePrice = 30000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8903), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 12000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8904), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(862), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 12000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(863), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            VehicleTypeId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.FareTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CeilingExtraPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("ceiling_extra_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<double>("ExtraFeePerKm")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_fee_per_km");

                    b.Property<int>("FareId")
                        .HasColumnType("integer")
                        .HasColumnName("fare_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FareId");

                    b.ToTable("fare_timelines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CeilingExtraPrice = 7000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8919), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(887), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 2000.0,
                            FareId = 1,
                            StartTime = new TimeOnly(6, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8920), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(888), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8958), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(959), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 1000.0,
                            FareId = 1,
                            StartTime = new TimeOnly(8, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8959), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(960), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            CeilingExtraPrice = 7000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8965), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(970), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 2000.0,
                            FareId = 1,
                            StartTime = new TimeOnly(15, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8965), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(971), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8971), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(979), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 1500.0,
                            FareId = 1,
                            StartTime = new TimeOnly(17, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8972), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(980), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            CeilingExtraPrice = 7000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8978), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(989), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 2000.0,
                            FareId = 2,
                            StartTime = new TimeOnly(6, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8978), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(990), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8985), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1049), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 1000.0,
                            FareId = 2,
                            StartTime = new TimeOnly(8, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8986), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1050), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8992), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1061), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 1500.0,
                            FareId = 2,
                            StartTime = new TimeOnly(15, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8992), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1062), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            CeilingExtraPrice = 7000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8998), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1071), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 2000.0,
                            FareId = 2,
                            StartTime = new TimeOnly(17, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8999), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1072), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            CeilingExtraPrice = 7000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9005), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1131), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 2000.0,
                            FareId = 3,
                            StartTime = new TimeOnly(6, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9005), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1132), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9013), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1144), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 1000.0,
                            FareId = 3,
                            StartTime = new TimeOnly(8, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9013), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1144), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            CeilingExtraPrice = 6000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9019), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1153), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 1500.0,
                            FareId = 3,
                            StartTime = new TimeOnly(15, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9020), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1154), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            CeilingExtraPrice = 10000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9026), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1163), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 2500.0,
                            FareId = 3,
                            StartTime = new TimeOnly(17, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9026), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1163), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 13,
                            CeilingExtraPrice = 5000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9032), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1172), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            EndTime = new TimeOnly(15, 0, 0),
                            ExtraFeePerKm = 1000.0,
                            FareId = 3,
                            StartTime = new TimeOnly(14, 0, 0),
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9032), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1173), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("RoomId"), "hash");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<double>("MaxDecrease")
                        .HasColumnType("double precision")
                        .HasColumnName("max_decrease");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "HELLO2022",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8256), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9647), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for new user: Discount 20% with max decrease 200k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.20000000000000001,
                            FileId = 9,
                            MaxDecrease = 200000.0,
                            Name = "New User Promotion",
                            Status = 1,
                            Type = 2,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8256), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9647), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "BDAY2022",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8266), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9660), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for September: Discount 10% with max decrease 150k for the booking with minimum total price 200k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 10,
                            MaxDecrease = 150000.0,
                            Name = "Beautiful Month",
                            Status = 1,
                            Type = 0,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8267), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9661), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "HOLIDAY",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8274), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9670), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for 2/9 Holiday: Discount 30% with max decrease 300k for the booking with minimum total price 1000k.",
                            DiscountPercentage = 0.29999999999999999,
                            MaxDecrease = 300000.0,
                            Name = "Holiday Promotion",
                            Status = 1,
                            Type = 0,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8275), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9671), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "ABC",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8282), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9680), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for users booking alot: Discount 10% with max decrease 300k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 11,
                            MaxDecrease = 300000.0,
                            Name = "ABC Promotion",
                            Status = 1,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8282), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9681), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = "VIRIDE2022",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8289), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9765), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for ViRide: Discount 10% with max decrease 100k for the booking with minimum total price 300k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 11,
                            MaxDecrease = 100000.0,
                            Name = "ViRide Promotion",
                            Status = 1,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8290), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9766), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = "VICAR2022",
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8298), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9780), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Details = "Promotion for ViCar: Discount 15% with max decrease 350k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.14999999999999999,
                            FileId = 11,
                            MaxDecrease = 350000.0,
                            Name = "ViCar Promotion",
                            Status = 1,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8299), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9781), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("MinTickets")
                        .HasColumnType("integer")
                        .HasColumnName("min_tickets");

                    b.Property<float?>("MinTotalPrice")
                        .HasColumnType("real")
                        .HasColumnName("min_total_price");

                    b.Property<int?>("PaymentMethods")
                        .HasColumnType("integer")
                        .HasColumnName("payment_methods");

                    b.Property<int?>("PromotionId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<int?>("TotalUsage")
                        .HasColumnType("integer")
                        .HasColumnName("total_usage");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UsagePerUser")
                        .HasColumnType("integer")
                        .HasColumnName("usage_per_user");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTimeOffset?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.Property<int?>("VehicleTypes")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_types");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId")
                        .IsUnique();

                    b.ToTable("promotion_conditions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8312), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8312), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9799), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9800), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8403), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9937), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            MinTotalPrice = 200000f,
                            PromotionId = 2,
                            TotalUsage = 50,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8404), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9938), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 4,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8424), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9966), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            MinTotalPrice = 1000000f,
                            PromotionId = 3,
                            TotalUsage = 50,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8425), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9967), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 2, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8441), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9994), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            MinTickets = 20,
                            MinTotalPrice = 500000f,
                            PromotionId = 4,
                            TotalUsage = 50,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8442), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9995), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8458), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(23), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            MinTotalPrice = 300000f,
                            PromotionId = 5,
                            TotalUsage = 500,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8459), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(24), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 3,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            VehicleTypes = 0
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8477), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(50), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 6,
                            TotalUsage = 500,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8478), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(51), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UsagePerUser = 3,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            VehicleTypes = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset?>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<int?>("PromotionConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("used");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PromotionConditionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PromotionId", "UserId")
                        .IsUnique();

                    b.ToTable("promotion_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8501), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8502), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(114), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(115), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8520), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8521), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(133), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(134), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            Used = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8535), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8535), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(150), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(151), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8548), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PromotionId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8548), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(167), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PromotionId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(168), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            Used = 2,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Role for driver",
                            Name = "DRIVER"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Role for booker",
                            Name = "BOOKER"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Role for admin",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
<<<<<<< HEAD
                        .HasDefaultValue(new Guid("7695a9af-08ec-41e0-9051-a00858a2679e"))
=======
                        .HasDefaultValue(new Guid("779c8d3b-87be-4868-8188-230879f9a098"))
>>>>>>> booking_datdt
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Bound>("Bound")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("bound");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<List<Step>>("Steps")
                        .IsRequired()
                        .HasColumnType("jsonb[]")
                        .HasColumnName("steps");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RouteRoutine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("route_routines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RouteStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DistanceFromFirstStationInRoute")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_from_first_station_in_route");

                    b.Property<double>("DurationFromFirstStationInRoute")
                        .HasColumnType("double precision")
                        .HasColumnName("duration_from_first_station_in_route");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int?>("NextRouteStationId")
                        .HasColumnType("integer")
                        .HasColumnName("next_route_station_id");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("StationId")
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("NextRouteStationId")
                        .IsUnique();

                    b.HasIndex("StationId");

                    b.HasIndex("RouteId", "StationId", "Index")
                        .IsUnique();

                    b.ToTable("route_stations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("stations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "80 Xa lộ Hà Nội, Bình An, Dĩ An, Bình Dương",
<<<<<<< HEAD
                            Code = new Guid("bab7ef10-65b0-4de2-917e-dbecc8bac683"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8564), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("a28ce41d-e6ce-4fd1-9abe-a8eed4fb364b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(212), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.879650683124561,
                            Longitude = 106.81402589177823,
                            Name = "Ga Metro Bến Xe Suối Tiên",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8565), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(213), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "39708 Xa lộ Hà Nội, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("c1bdba02-bd3e-42aa-ba9a-9bf2b9880ffe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8572), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("a9cc48b6-2746-4db1-88c1-90b71f224787"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(225), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.8664854431366,
                            Longitude = 106.80126112015681,
                            Name = "Ga Metro Đại học Quốc Gia",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8573), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(226), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "4/16B Xa lộ Hà Nội, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("0d0cf023-4ca3-4afa-b726-05ca133fee5a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8575), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2d60b2cf-da32-46a6-9087-f41f7800eb1a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(228), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.85917304306453,
                            Longitude = 106.78884645537156,
                            Name = "Ga Metro Công Viên Công Nghệ Cao",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8576), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(229), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "RQWC+GJX Xa lộ Hà Nội, Bình Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("56858c0e-e80d-4a3e-a701-0a2f4ca91b93"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8578), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("efc2760e-3e5d-440f-9121-1a96f1d75479"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(232), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.846402468851362,
                            Longitude = 106.77154946668446,
                            Name = "Ga Metro Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8578), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(232), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Address = "88 Nguyễn Văn Bá, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("dcc39f05-59ae-43a0-800a-7dca52178223"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8580), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("08745632-d5d0-4925-89be-bba7f02afa38"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(235), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.821402021794112,
                            Longitude = 106.75836408336727,
                            Name = "Ga Metro Phước Long",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8580), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(235), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Address = "RQ54+93V Xa lộ Hà Nội, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("3d74ea20-ace1-4b7c-9583-25defeaa5d01"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8583), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("13701564-9b4b-43cd-9e8c-be8ddd560459"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(239), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.808505238748038,
                            Longitude = 106.75523952123311,
                            Name = "Ga Metro Gạch Chiếc",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8584), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(240), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Address = "RP2R+VV9 Xa lộ Hà Nội, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("fe367d38-baed-496c-8559-5eae68736eab"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8586), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2718ac83-b362-4fe5-a9de-5368e93d2bfe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(242), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.802254217820691,
                            Longitude = 106.74223332879555,
                            Name = "Ga Metro An Phú",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8586), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(242), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Address = "763J Quốc Hương, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("f55280b4-1289-4b93-b5db-58b543abc47e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8588), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("847274c5-425a-47ec-bfe2-5615208be2ea"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(250), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.800728306627473,
                            Longitude = 106.73370791313042,
                            Name = "Ga Metro Thảo Điền",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8588), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(250), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            Address = "QPXF+C8J Nguyễn Hữu Cảnh, 25, Bình Thạnh, Thành phố Hồ Chí Minh, Việt Nam",
<<<<<<< HEAD
                            Code = new Guid("19a2a165-e7ff-49a9-baf4-6377440cf1a2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8590), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("4040f60b-3258-42b4-b21b-8217d48cd3bf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(253), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.798621063183687,
                            Longitude = 106.72327125155881,
                            Name = "Ga Metro Tân Cảng",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8590), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(253), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            Address = "QPW8+C5Q, Phường 22, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("e35b76ed-6025-4df6-b951-a7afd02339d4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8595), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("b6dc9e04-2b46-4b3d-b7b9-51c26abfb884"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(257), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.796160596763055,
                            Longitude = 106.71548797723645,
                            Name = "Ga Metro Khu du lịch Văn Thánh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8595), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(257), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            Address = "39761 Nguyễn Văn Bá, Phước Long B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("1161feff-d551-4a08-a094-84f4540b6b7d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8597), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("653bdf3b-28a9-404a-af93-cc90f1f7cb0b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(260), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.836558412392224,
                            Longitude = 106.76576466834388,
                            Name = "Ga Metro Bình Thái",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8598), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(260), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("826d4e3f-d5f7-40f9-ae6e-7cc6851edca1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8599), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("642f7899-a67b-42c5-921a-2f9ce439f893"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(263), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.855748533595877,
                            Longitude = 106.78914067676806,
                            Name = "AI InnovationHub",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8600), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(263), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 13,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("f9b5a1ae-e029-49a1-b0c8-cbeab01173f3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8602), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("dff975d2-6b4b-45b6-a922-360f928ee9b2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(266), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.853144521692798,
                            Longitude = 106.79643313765459,
                            Name = "Tòa nhà HD Bank",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8602), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(267), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 14,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh ",
<<<<<<< HEAD
                            Code = new Guid("585319f1-00c4-4495-8bf4-5c6e820bdf4b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8604), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("81369c78-a931-40cb-a587-9193605c0dcb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(318), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.851138424399943,
                            Longitude = 106.79857191639908,
                            Name = "FPT Software - Ftown 1,2",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8604), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(319), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 15,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("bc37a611-3bbf-44a1-8331-92405b9e4316"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8606), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("21d1595d-6bfd-4abf-8f85-8415bbdb3e32"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(322), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.842755223277589,
                            Longitude = 106.80737654998441,
                            Name = "Tòa nhà VPI phía Nam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8607), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(322), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 16,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("c480916c-189b-481a-a5b1-5fa3992e290a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8608), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("78399027-a70f-460b-b67c-bb30cb5f34cd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(327), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.841160382489567,
                            Longitude = 106.80898373894351,
                            Name = "Viện công nghệ cao Hutech",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8609), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(328), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 17,
                            Address = "RRP7+CJ7 đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("141feff0-1656-49a1-b24b-55724424bfbf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8610), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("7943afe0-34ae-49cc-a0a3-28104f927891"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(330), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.836238463608794,
                            Longitude = 106.814245107947,
                            Name = "Cổng Jabil Việt Nam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8611), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(331), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 18,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("1d7181dc-4d2a-40c7-9255-589b79ba70d8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8615), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("d05f28a1-e037-491b-b849-c75001a124a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(334), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.832233088594503,
                            Longitude = 106.82046132230808,
                            Name = "Saigon Silicon",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8616), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(335), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 19,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("132734f5-ae85-431e-a77b-bcd4005b92e3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8618), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("dc59ab03-ac75-478c-a128-3f06d16a5d2b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(337), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.836776238894464,
                            Longitude = 106.81401100053891,
                            Name = "ISMARTCITY (ISC)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8618), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(338), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 20,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("c3a291f0-f932-444d-938f-b6adc56e89cd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8620), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("df4ed41d-6284-4761-9315-fa8382b58d8c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(340), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.840578398658391,
                            Longitude = 106.8099978721756,
                            Name = "Trường đại học FPT",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8620), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(341), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 21,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("0d9d848a-c947-48bc-abef-0169726ef22e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8622), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6c948b85-0ab6-4744-8368-2e75cc48db62"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(344), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.84578835745819,
                            Longitude = 106.80454376198392,
                            Name = "Công Ty CP Công Nghệ Sinh Học Dược Nanogen",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8623), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(345), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 22,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("7a47940a-cb2f-4db0-8dcc-5b07deee1d15"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8625), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("29b43532-6f55-4cc8-a21c-8b74eb7ad75a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(348), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.853375488919204,
                            Longitude = 106.79658230436019,
                            Name = "Intel VietNam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8626), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(348), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 88,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("25ed4fa9-e319-44d3-90ba-f28bdad7581e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8627), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("104b0819-b626-4064-8717-402076f48553"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(351), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.854367872934622,
                            Longitude = 106.79375338625633,
                            Name = "Nidec VietNam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8628), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(351), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 23,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("633ceec8-7ff6-4ad8-9668-3fc8ef858699"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8629), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ad2abf1e-4e11-4e65-8261-181fe68157c0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(356), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.854860900718421,
                            Longitude = 106.79189382870402,
                            Name = "CMC Data Center",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8630), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(357), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 24,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("a30972cc-ab02-4769-bdd6-4e451681c1d8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8632), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("dbf45116-aa5e-463a-aae5-3f101b86de20"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(359), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.856082809107784,
                            Longitude = 106.78924956530844,
                            Name = "Inverter ups Sài Gòn",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8632), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(360), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 25,
                            Address = "Đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("378aa22e-338d-4e8f-903a-121524ff1781"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8635), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("e7a962f7-5234-4008-851d-92e225cc8e73"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(362), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.838027429470513,
                            Longitude = 106.81035219090674,
                            Name = "Trường đại học Nguyễn Tất Thành",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8636), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(363), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 26,
                            Address = "Đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("4701731a-be79-4650-a19a-227a177e489a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8638), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("20da4683-5325-42f4-b81a-f05de3b0e1d5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(365), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.834922120966135,
                            Longitude = 106.80776601621393,
                            Name = "FPT Software - Ftown 3",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8638), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(366), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 27,
                            Address = "RRM4+VMQ đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("87585091-c942-4ef0-b466-2a64489d300e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8640), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("b7e6376a-53df-41b5-b87d-dd7f32cee644"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(368), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.834215900566933,
                            Longitude = 106.80727419233645,
                            Name = "Công ty Cổ phần Hàng không VietJet",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8641), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(369), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 28,
                            Address = "RRJ4+X9F đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("91437f15-4844-44dc-8897-a90745f364aa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8642), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("5abe1e41-1584-4a4b-b820-b37590aa5411"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(371), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.832245246386895,
                            Longitude = 106.80598499131753,
                            Name = "Sài Gòn Trapoco",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8643), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(372), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 29,
                            Address = "RRJ4+G2J đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("31721364-54d3-4d92-abe9-b4c967f26a06"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8645), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("91d96f69-e48c-42f6-8229-daf440e24ae7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(374), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.830911650064834,
                            Longitude = 106.80503995362199,
                            Name = "Công ty kỹ thuật công nghệ cao sài gòn",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8645), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(375), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 30,
                            Address = "Đường D2, Tăng Nhơn Phú B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("8732844f-1da6-424f-a74c-89f871799211"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8647), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2741bf81-a8ee-45c7-96a3-cefe0e9116e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(378), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.825858875527519,
                            Longitude = 106.79860212469366,
                            Name = "Nhà máy Samsung Khu CNC",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8647), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(378), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 31,
                            Address = "Đường D2, Tăng Nhơn Phú B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("11c5d44a-b513-4a4c-84a0-36a3c3e6dbf4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8652), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("32d23f53-c8f2-4b8e-a22e-ef4051b44959"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(384), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.826685687856866,
                            Longitude = 106.8001755286645,
                            Name = "Công ty công nghệ cao Điện Quang",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8653), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(384), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 32,
                            Address = "G23 Lã Xuân Oai, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("07ff10bf-eec0-4ebb-b4fc-5bb885e3c50a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8655), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("13861c8f-60be-4739-bf3f-2e9a1a5919f8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(387), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.829932294153192,
                            Longitude = 106.80446003004153,
                            Name = "Công ty Thảo Dược Việt Nam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8655), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(387), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 33,
                            Address = "1-2 đường D2, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("4aca3c94-aa76-4482-aece-c5e5806d6234"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8660), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("cece21bf-42c3-48c4-aca3-06e87a67daac"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(391), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.830577375598693,
                            Longitude = 106.80512235256614,
                            Name = "Công ty Daihan Vina",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8660), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(392), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 34,
                            Address = "VQ8Q+W5W QL 1A, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("2923dbee-4427-4904-b53d-732caf9f1d41"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8662), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("fc15c438-0fd4-4167-9e3c-9720c32aafc9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(395), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.867306661370069,
                            Longitude = 106.78773791444128,
                            Name = "Trường Đại học Nông Lâm",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8663), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(395), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 35,
                            Address = "QL 1A, Linh Xuân, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("9ebbc8d8-76c6-418a-b1ed-291382c32798"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8664), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("3d09579f-2760-4b5c-9b52-f40a902efbee"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(398), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.869235667646493,
                            Longitude = 106.77793783791677,
                            Name = "Trường đại học Kinh Tế Luật",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8665), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(398), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 36,
                            Address = "VRC2+QR9, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("ea7e6a80-8828-43b7-8308-4f95ca462c98"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8666), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("4a2a47f9-ed26-4d71-b54d-8c93fdc7ef1f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(401), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.871997549994893,
                            Longitude = 106.80277007274188,
                            Name = "Đại học Khoa học Xã hội và Nhân văn",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8667), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(401), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 37,
                            Address = "VRF2+XFW đường Quảng Trường Sáng Tạo, Đông Hoà, Dĩ An, Bình Dương",
<<<<<<< HEAD
                            Code = new Guid("b2c08bbc-7d17-49ec-a573-a15bb561da92"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8669), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("74dc902c-1dce-48c2-aff0-e984a40b052a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(404), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.875092307642346,
                            Longitude = 106.80144678877895,
                            Name = "Nhà Văn Hóa Sinh Viên ĐHQG",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8670), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(404), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 38,
                            Address = "Đường Hàn Thuyên, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("7569ba45-ea63-4936-b6f6-81df013416a7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8671), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8162cc23-526f-4be9-b7c9-c4afee10af8f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(407), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.870481440652956,
                            Longitude = 106.80198596270417,
                            Name = "Cổng A - Trường đại học Công Nghệ Thông Tin",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8672), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(407), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 39,
                            Address = "VQCW+FG2, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("a61c3214-f959-44f6-be41-bd0286960a67"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8673), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("5e56109a-bb64-4da6-867e-4f1e883fca1d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(412), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.870503469555034,
                            Longitude = 106.79628492520538,
                            Name = "Trường đại học Thể dục Thể thao",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8674), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(413), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 40,
                            Address = "Đường T1, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("7c9c3b08-2f6d-4463-abc0-432421eeea4a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8676), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("1c63943b-01eb-4524-b138-21051faf2418"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(416), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.875477130935243,
                            Longitude = 106.79903376051722,
                            Name = "Trường đại học Khoa học Tự nhiên (cơ sở Linh Trung)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8676), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(416), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 41,
                            Address = "Đường Quảng Trường Sáng Tạo, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("28bf7799-7793-4a19-989b-844cc173fc9f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8679), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8d484f42-8eeb-46e2-b77b-dfa58e409c36"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(419), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.876446815885343,
                            Longitude = 106.80177999819321,
                            Name = "Trường đại học Quốc Tế",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8680), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(419), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 42,
                            Address = "Đường Tạ Quang Bửu, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("4be731bd-e600-4549-81e1-3438664d4d2b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8682), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("1bc50876-c87c-4f61-b2ce-464e10bb6889"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(422), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.878197830285536,
                            Longitude = 106.80614795287057,
                            Name = "Cổng kí túc xá khu A (đại học quốc gia TP Hồ Chí Minh)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8682), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(422), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 43,
                            Address = "Đường Tạ Quang Bửu, Đông Hòa, Dĩ An, Bình Dương",
<<<<<<< HEAD
                            Code = new Guid("aa8676b0-1f85-426c-b2bd-4d8ec6af906f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8684), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("94673d92-1032-4fcb-9bb8-1d951ca43010"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(426), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.879768516539494,
                            Longitude = 106.80697880277312,
                            Name = "Trường đại học Bách Khoa (cơ sở 2)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8685), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(426), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 44,
                            Address = "Đường Tạ Quang Bửu, Đông Hòa, Dĩ An, Bình Dương",
<<<<<<< HEAD
                            Code = new Guid("2926b611-6b6d-423a-825d-7dc2531f5b52"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8687), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ced18452-5219-4899-a5ee-e3a21fe80573"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(429), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.877545337230165,
                            Longitude = 106.80552329008295,
                            Name = "Trung tâm ngoại ngữ đại học Bách Khoa (BK English)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8688), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(429), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 45,
                            Address = "Số 1 đường Võ Văn Ngân, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("12def66d-c468-45ca-92ab-5a609b730d75"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8689), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6c780659-4c1a-4273-a342-73b9f57c5dc6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(478), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.849721027334326,
                            Longitude = 106.77164269167564,
                            Name = "Trường đại học Sư phạm Kĩ thuật Thành phố Hồ Chí Minh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8690), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(479), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 46,
                            Address = "VQ25+JWQ đường Chương Dương, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("b53c82b5-c98f-44e1-85ad-de757dfc7133"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8691), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("e7f2816a-8155-42bd-8af9-90bae23b2d10"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(482), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.851623294286195,
                            Longitude = 106.7599477126918,
                            Name = "Trường Cao đẳng Công nghệ Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8692), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(483), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 50,
                            Address = "26 đường Chương Dương, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("edc51df7-969e-486f-9e92-c5bfdb903ace"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8694), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("df6111f6-3839-40fc-9465-052b47ebafa7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(487), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.852653003274197,
                            Longitude = 106.76018734231964,
                            Name = "Trung tâm thể dục thể thao Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8694), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(488), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 51,
                            Address = "19A đường số 17, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("f7de8441-9e43-47ae-baa6-239d7cf5c61d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8696), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("78743119-1721-450a-8526-e60f7966fe4e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(491), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.854723648720167,
                            Longitude = 106.76032173572378,
                            Name = "Trường Cao đẳng Nghề Thành phố Hồ Chí Minh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8696), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(491), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 52,
                            Address = "VQ46+9J3 đường số 17, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("7d19600a-6610-4f8c-b492-d36e1cf51e2a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8700), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2d22964f-c055-41c5-98bb-7af301d69fa0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(494), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.855800383594074,
                            Longitude = 106.76151598927879,
                            Name = "Trường đại học Ngân hàng",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8700), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(494), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 53,
                            Address = "356 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("c81a65f0-a6c4-4262-8bdf-2109f9cd01a5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8702), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("a484147e-577c-49a2-8f27-9700bc87d4dc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(497), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.83090741994997,
                            Longitude = 106.76359240459003,
                            Name = "Trường đại học Điện Lực",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8702), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(497), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 54,
                            Address = "360 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("88d64978-9657-455a-9fcd-e9c03db36c51"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8704), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("d40e5f9e-fc3b-41f9-9c9c-596a702e7f87"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(500), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.831781684548069,
                            Longitude = 106.76462343340792,
                            Name = "Metro Star - Quận 9 | Tập đoàn CT Group+",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8705), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(501), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 55,
                            Address = "354-356B Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("64ab8cef-7f25-4342-9515-b252b92cf35b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8706), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("152ff3c8-ae6e-4b06-9b39-77bf428e5718"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(503), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.830438851236304,
                            Longitude = 106.76388396745739,
                            Name = "Chi nhánh công ty CyberTech Việt Nam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8707), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(504), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 56,
                            Address = "RQH7+XP4 Xa lộ, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("87bc6f0f-fd55-4f57-9bf7-7e2dce19e827"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8708), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("d27b3653-00dd-4034-8df6-8cb956988b06"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(506), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.829834904338366,
                            Longitude = 106.76426274528296,
                            Name = "Zenpix Việt Nam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8709), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(507), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 57,
                            Address = "12 Đặng Văn Bi, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("d92f193a-632c-4777-b225-a514225f89c4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8711), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("9664cf82-851f-4cfd-82e7-d80cb6a155fa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(509), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.840946385700587,
                            Longitude = 106.76509820241216,
                            Name = "Nhà máy sữa Thống Nhất (Vinamilk)",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8711), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(510), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 58,
                            Address = "10/42 đường Số 4, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("55134e0a-75a3-4696-8688-ed3b487ea350"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8713), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("1a1eea9b-503b-4f08-b581-38eaff18df1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(515), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.840432688988782,
                            Longitude = 106.76088713432273,
                            Name = "Công ty xuất nhập khẩu Tây Tiến",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8713), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(516), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 59,
                            Address = "102 Đặng Văn Bi, Bình Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("5f5d9c73-6ed4-4ae0-9a9b-56c0054a3f26"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8715), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("736a12a3-478c-4e8f-b269-fe28113978b9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(518), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.844257732572313,
                            Longitude = 106.76276736279874,
                            Name = "Trung tâm tiêm chủng vắc xin VNVC",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8715), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(519), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 60,
                            Address = "Km9 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("f6d1de00-3b46-4bd3-876b-8bfd78da6f37"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8719), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ac93b7b6-9139-48b2-a27a-5185ce6e288a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(521), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.825780208240717,
                            Longitude = 106.75924170740572,
                            Name = "Công ty cổ phần Thép Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8719), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(522), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 61,
                            Address = "Km9 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("e69e00ab-23b7-42e2-9e69-ce8567584a90"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8721), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("b1dba1d8-8705-4934-816b-b5d75f0c130c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(524), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.82825779372371,
                            Longitude = 106.76092968863129,
                            Name = "Công Ty Cổ Phần Cơ Điện Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8722), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(525), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 62,
                            Address = "RQH5+324 đường Số 1, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("df3aac7e-f82f-4f20-bebb-c9d892e675e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8723), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("51eeaf4a-97f6-4350-a926-d2f286009d71"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(527), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.827423240919156,
                            Longitude = 106.75761821078893,
                            Name = "Công ty TNHH Nhiệt điện Thủ Đức",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8724), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(528), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 63,
                            Address = "Đường Số 1, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("2a9328f8-297b-4920-ab6f-a8b536e7534f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8725), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("468c7514-c2f8-4493-a909-d4280cd3b42c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(530), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.827933659643358,
                            Longitude = 106.75322566624341,
                            Name = "Cảng Trường Thọ",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8726), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(531), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 64,
                            Address = "96 Nam Hòa, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("254eca31-82cd-4f38-b44e-2b9426d4f9d1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8727), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("dedb2ff7-74f1-4b1f-af8a-d105e5c7ba73"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(533), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.82037580579453,
                            Longitude = 106.75928223003976,
                            Name = "Công ty TNHH BeuHomes",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8728), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(534), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 65,
                            Address = "9 Nam Hòa, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("1e8cfe0e-e1f4-4b9e-afb5-ac6d00d2d5f4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8730), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6190be7e-22f6-43d6-970f-137e8b1bc68e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(536), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.821744734671684,
                            Longitude = 106.76019934624064,
                            Name = "Công ty TNHH Creative Engineering",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8730), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(537), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 66,
                            Address = "22/15 đường số 440, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("7877791c-b59f-43b8-abd3-5c9626dbb825"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8732), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("7d07f9f1-8029-46b8-9434-249db8f08b86"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(542), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.82220109625001,
                            Longitude = 106.75952721927021,
                            Name = "Công Ty Công Nghệ Trí Tuệ Nhân Tạo AITT",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8732), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(543), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 67,
                            Address = "628C Xa lộ Hà Nội, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("6f0b6e2a-fda3-4d9e-ab50-9735223cd275"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8734), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("4b888297-761e-4535-9bfb-9b3d568b4696"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(545), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.805200229819087,
                            Longitude = 106.75206770837505,
                            Name = "Golfzon Park Thảo Điền",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8734), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(546), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 68,
                            Address = "Đường Giang Văn Minh, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("638522b3-7e98-4807-adb0-a7bd11252f01"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8738), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("f0a7c806-050d-41c3-b445-831668fb2515"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(550), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.803332925851043,
                            Longitude = 106.7488580702081,
                            Name = "Saigon Town and Country Club",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8739), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(550), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 69,
                            Address = "30 đường số 11, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("a1590227-9749-4cb8-85e2-9f787a2dbb17"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8741), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("d7f804be-41cc-4876-8b37-7f3dc2dfdff5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(553), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.804563036954756,
                            Longitude = 106.74393815975716,
                            Name = "The Nassim Thảo Điền",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8741), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(554), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 70,
                            Address = "RP4W+V3J đường Mai Chí Thọ, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("05c4adac-de05-46a1-8af1-2294d547acdf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8747), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("f10b1542-2097-450d-8631-c5d447cf702e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(556), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.807262850388623,
                            Longitude = 106.74530677686282,
                            Name = "Blue Mangoo Software",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8747), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(557), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 71,
                            Address = "51 đường Quốc Hương, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("8ddb5742-6d7b-4b6a-a074-e444ab4f3d86"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8749), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("3738c881-793f-4507-9788-bca704b5d7b4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(560), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.805401459108982,
                            Longitude = 106.73134189331353,
                            Name = "Trường Đại học Văn hóa TP.HCM - Cơ sở 1",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8750), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(560), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 72,
                            Address = "6-6A 8 đường số 44, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("1fb88456-b392-43c1-9904-f7c9f56077a4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8751), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("641408ed-927e-483b-aec2-e32d6aa3f7ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(562), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.806048021383644,
                            Longitude = 106.72928364712546,
                            Name = "Trường song ngữ quốc tế Horizon",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8752), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(563), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 73,
                            Address = "45 đường số 44, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("b5bddf33-a280-4ac0-86fa-551ebf225f1d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8754), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("06d6b51a-70d9-4417-bd3b-12dc24f61408"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(565), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.809270864831371,
                            Longitude = 106.72846844993934,
                            Name = "Công Ty TNHH Dịch Vụ Địa Ốc Thảo Điền",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8754), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(566), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 74,
                            Address = "40 đường Nguyễn Văn Hưởng, Thảo Điền, Thành phố Thủ Đức, Thành Phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("94594e28-2551-49e8-bb31-24ddee2b85be"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8756), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("3c0eede4-57ff-4f57-b806-0ac6f211a808"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(571), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.806246963358644,
                            Longitude = 106.72589627507526,
                            Name = "Công Ty TNHH Một Thành Viên Ánh Sáng Hoàng ĐP",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8756), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(572), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 75,
                            Address = "1 đường Xuân Thủy, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("83399dda-8bb0-4265-bfa0-849e61f0ea00"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8758), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("675b6420-1fa4-4a2f-ab6b-4a67c4418899"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(574), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.803458791026568,
                            Longitude = 106.72806621661472,
                            Name = "Trường đại học Quốc Tế Thành phố Hồ Chí Minh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8759), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(575), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 76,
                            Address = "91B đường Trần Não, Bình Khánh, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("9bc1a14c-1020-44c7-a29f-718da935a696"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8762), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2029a2e5-3063-46be-8aaf-3d1714a488dc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(577), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.797897644669561,
                            Longitude = 106.73143206816108,
                            Name = "SCB Trần Não - Ngân hàng TMCP Sài Gòn",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8763), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(578), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 77,
                            Address = "6 đường số 26, Bình Khánh, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("c390c391-6f08-49b5-af41-a1c48a5fd2f9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8764), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("45495401-19ba-4780-aa6a-34cbc156ba81"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(580), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.793905585531592,
                            Longitude = 106.7293406127999,
                            Name = "Công Ty TNHH Xuất Nhập Khẩu Máy Móc Và Phụ Tùng Ô Tô Hưng Thịnh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8765), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(581), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 78,
                            Address = "220 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("a15a5dd0-5600-4630-88fd-898516515a19"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8767), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("21ab079d-b07d-414a-a0e1-a7d840bb3d67"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(583), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.789891277804319,
                            Longitude = 106.72895399848618,
                            Name = "Tòa nhà Microspace Building",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8767), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(584), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 79,
                            Address = "18/2 đường số 35, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("63134bb9-c220-4e73-816e-56f48c162686"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8769), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2bc46af6-c74c-4473-b72e-54311fa3c435"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(586), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.786711346588366,
                            Longitude = 106.72783903612815,
                            Name = "Công ty TNHH vận tải - thi công cơ giới Xuân Thao",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8769), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(587), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 80,
                            Address = "9 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("e723362d-efba-4474-8669-c03a288b8edb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8771), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("64d7bc19-9372-4783-9c02-4451374884ff"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(632), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.780549913195312,
                            Longitude = 106.72849002239546,
                            Name = "Công Ty TNHH Ch Resource Vietnam",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8771), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(632), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 81,
                            Address = "10 đường số 39, Bình Trưng Tây, Thành Phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("44ea08c7-2ddf-4d71-94a8-96c3a98ed6c5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8773), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("d6d1f3f7-16c2-4070-9c71-895b8a4ad10b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(635), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.786744237747117,
                            Longitude = 106.72969521262236,
                            Name = "Công Ty TNHH Thương Mại Và Dịch Vụ Nhật Vượng",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8774), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(636), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 82,
                            Address = "125 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("e9911f8c-9eef-4cbc-8b92-411d07ee7ad0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8775), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("14f72105-708b-4ab1-9f3f-79b35929c98a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(641), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.792554668741762,
                            Longitude = 106.73067177064897,
                            Name = "Ngân hàng TMCP Kỹ thương Việt Nam (Techcombank)- Chi nhánh Gia Định - PGD Trần Não",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8776), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(641), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 83,
                            Address = "25 Ung Văn Khiêm, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("742efeb0-efb4-42f9-a241-9228316c4386"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8777), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("34bd98ca-882c-466c-9238-38493b63eac2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(644), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.798737294717368,
                            Longitude = 106.72126763097279,
                            Name = "Tòa Nhà Melody Tower, Cty Toi",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8778), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(644), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 84,
                            Address = "561A đường Điện Biên Phủ, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("9de7a3e0-18d5-459d-b740-327d2b396f5e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8781), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("b334d8e3-9190-46fb-9679-1f78aed7c7bf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(647), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.799795706410299,
                            Longitude = 106.71843607604076,
                            Name = "Pearl Plaza Văn Thánh",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8782), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(648), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 85,
                            Address = "15 Nguyễn Văn Thương, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("ef1b4507-de65-4a2b-a7dd-ddf375c00aaa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8783), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("7a4e35ea-6562-46ab-a08a-56487a53bd56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(650), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.802303255825205,
                            Longitude = 106.71812789316297,
                            Name = "Căn hộ Wilton Tower",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8784), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(651), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 86,
                            Address = "02 Võ Oanh, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("37d0b2ea-efbc-4005-a025-a29723040496"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8785), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("539d2f1f-a9ba-4b09-ac72-ad9746ed137b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(653), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.804470786914793,
                            Longitude = 106.7167285754774,
                            Name = "Trường đại học Giao Thông Vận Tải",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8786), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(653), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 87,
                            Address = "15 Đường D5, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
<<<<<<< HEAD
                            Code = new Guid("be492a79-d14a-4e4f-be6d-7d6430b9fceb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8787), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ee676eae-df31-474a-8f03-33904f956873"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(656), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.806564326384949,
                            Longitude = 106.71296786250547,
                            Name = "Trường Đại học Ngoại thương - Cơ sở 2",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8788), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(656), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 89,
                            Address = "Lô E2a-10 Đường, D2b Đ. D1, TP. Thủ Đức, Thành phố Hồ Chí Minh, Việt Nam",
<<<<<<< HEAD
                            Code = new Guid("a10ce880-0451-46ce-bd56-8a5f5e32d187"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8790), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("267aecff-6df7-440f-84f6-c071426187ce"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(659), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Latitude = 10.840147321061634,
                            Longitude = 106.81262497275418,
                            Name = "Vườn ươm doanh nghiệp Công Nghệ Cao - SHTP",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8790), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(659), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            Code = new Guid("ec2f1e56-473d-4d78-90ed-5fa20ff7c86b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7903), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6977ac7f-b5cd-4ab6-8d0b-ce89d438b17b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9035), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 1,
                            Gender = 1,
                            Name = "Quach Dai Loi",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7904), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9037), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            Code = new Guid("80271610-1f61-4a11-9cb0-f873dfe01f17"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7919), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("bf7a3fb7-0ca7-46f7-87c6-eb497b6af4fc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9062), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 2,
                            Gender = 1,
                            Name = "Do Trong Dat",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7920), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9088), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            Code = new Guid("ec7eda0b-cb9e-4ad8-96ba-99b22fbea5ca"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7930), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6507890a-b722-42a8-afb3-3603edc08fa7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9152), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 3,
                            Gender = 1,
                            Name = "Nguyen Dang Khoa",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7931), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9153), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            Code = new Guid("d095e234-54ee-4a55-879d-d4005be479a1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7940), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("546e6462-af2b-4f64-b9a0-701ba0d5a7e1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9168), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 4,
                            Gender = 1,
                            Name = "Than Thanh Duy",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7941), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9169), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            Code = new Guid("5b2ba066-81f0-4341-8880-580696eac4fd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7950), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("502d6bec-5c0d-4dda-9f9f-ba63d54a3f51"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9185), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 5,
                            Gender = 1,
                            Name = "Loi Quach",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7951), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9186), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            Code = new Guid("cc7d3ed9-7558-4ac0-904c-fd090b4e15b7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7964), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8c879b2f-3bb0-40da-840f-5dc60f386dfd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9200), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 6,
                            Gender = 1,
                            Name = "Dat Do",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7964), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9201), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
<<<<<<< HEAD
                            Code = new Guid("bb2c1595-aaf2-4693-a8d6-2a674b1a5676"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7974), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("5708748c-1bee-4bf7-bfc4-c2e43b7dc432"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9214), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 7,
                            Gender = 1,
                            Name = "Khoa Nguyen",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7974), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9215), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
<<<<<<< HEAD
                            Code = new Guid("89a16c54-43e8-48e0-add0-fadd6051bef2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7987), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("8bcf31e5-8301-4c3d-824b-62aa7f24b700"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9230), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 8,
                            Gender = 1,
                            Name = "Thanh Duy",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7988), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9231), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
<<<<<<< HEAD
                            Code = new Guid("f0112401-bb02-44b1-9021-a294c4791559"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7998), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("dde77239-63b4-433a-9ee5-de8b7bd7e64d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9246), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            FileId = 13,
                            Gender = 1,
                            Name = "Admin Quach Dai Loi",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(7998), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9247), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
<<<<<<< HEAD
                            Code = new Guid("cad42654-892e-4227-9ba0-928be95e9fa2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8011), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("2d706a16-31fe-4636-b7fd-2509213bc41a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9260), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Than Thanh Duy",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8012), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9261), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
<<<<<<< HEAD
                            Code = new Guid("773131dd-4f37-40d1-b62b-b475b366f5e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8021), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("6c5dfe23-760c-4bad-af2e-56be59e9229b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9273), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Nguyen Dang Khoa",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8022), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9274), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
<<<<<<< HEAD
                            Code = new Guid("128ddeac-adfc-4ea8-8a27-ed849ba30332"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8031), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("ac6148e2-ce8b-4b5d-bf4e-01ab4fb217d6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9285), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Do Trong Dat",
                            Status = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8031), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 179, DateTimeKind.Unspecified).AddTicks(9286), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("LastSeenTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
<<<<<<< HEAD
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 657, DateTimeKind.Unspecified).AddTicks(3144), new TimeSpan(0, 7, 0, 0, 0)))
=======
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 158, DateTimeKind.Unspecified).AddTicks(4631), new TimeSpan(0, 7, 0, 0, 0)))
>>>>>>> booking_datdt
                        .HasColumnName("last_seen_time");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("user_rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            Code = new Guid("39cc4a80-bc95-4fdd-94b3-8007e5e8abc3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9057), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.01",
                            Name = "Wave Alpha",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9058), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("65bab531-737a-4656-b050-852bf21cd873"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1211), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.01",
                            Name = "Wave Alpha",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1213), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 2,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            Code = new Guid("9405a838-5028-41d8-9d00-07e2c418d1c3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9061), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.02",
                            Name = "BMW I8",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9061), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("229b0b9e-9daf-4c12-8d90-1080a0f94131"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1221), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.02",
                            Name = "BMW I8",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1222), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 1,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            Code = new Guid("36366e4e-d162-43b2-829d-d508ce791103"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9063), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.03",
                            Name = "Mazda CX-8",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9063), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("39dd1293-bd91-46c5-90d1-755c89d1bea2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1224), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.03",
                            Name = "Mazda CX-8",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1224), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 3,
                            VehicleTypeId = 3
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            Code = new Guid("29e6d993-f5f3-41d2-a59f-d4e838e76b6c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9065), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.04",
                            Name = "Honda CR-V",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9066), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("49e3d4e4-5d6e-4400-bb49-07e3b777ea5f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1230), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            LicensePlate = "51B.000.04",
                            Name = "Honda CR-V",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1231), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 4,
                            VehicleTypeId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("vehicle_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            Code = new Guid("632af7c2-ccc2-47b1-ab28-c9e4ad0b2dc3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8858), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("0a5e28e9-8add-4a35-ab69-8f47edec1f31"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(785), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Name = "ViRide",
                            Slot = 2,
                            Status = 1,
                            Type = 0,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8859), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(786), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            Code = new Guid("7975d2e9-7d62-4528-9f47-4ae8e3935052"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8872), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("5d6e2748-e078-4f1e-a05a-d97c25c5fbd9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(808), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Name = "ViCar-4",
                            Slot = 4,
                            Status = 1,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8873), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(809), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            Code = new Guid("c7284fc6-0e9d-436b-bfbf-14e8f16040a1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8884), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            Code = new Guid("7460eaf4-2fc7-48fd-9373-7078c2e1ad84"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(821), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            CreatedBy = 0,
                            Name = "ViCar-7",
                            Slot = 7,
                            Status = 1,
                            Type = 1,
<<<<<<< HEAD
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(8885), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(822), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.VerifiedCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("verified_codes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9113), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9114), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1320), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1321), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9117), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9117), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1327), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1328), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9119), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9119), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1330), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1331), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9120), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9121), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1332), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1333), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9122), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9122), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1334), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1335), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9124), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9125), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1337), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1338), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9126), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9126), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1339), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1340), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Balance = 500000.0,
<<<<<<< HEAD
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9127), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 13, 34, 0, 667, DateTimeKind.Unspecified).AddTicks(9128), new TimeSpan(0, 7, 0, 0, 0)),
=======
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1341), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 10, 17, 15, 7, 5, 180, DateTimeKind.Unspecified).AddTicks(1342), new TimeSpan(0, 7, 0, 0, 0)),
>>>>>>> booking_datdt
                            UpdatedBy = 0,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TxnId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("txn_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("wallet_transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AffiliateAccount", b =>
                {
                    b.HasOne("Domain.Entities.AffiliateParty", "AffiliateParty")
                        .WithMany("AffiliateAccounts")
                        .HasForeignKey("AffiliatePartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wallet", "Wallet")
                        .WithMany("AffiliateAccounts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliateParty");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("Banner")
                        .HasForeignKey("Domain.Entities.Banner", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.RouteStation", "EndRouteStation")
                        .WithMany("EndRouteStationBookings")
                        .HasForeignKey("EndRouteStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("PromotionId");

                    b.HasOne("Domain.Entities.RouteStation", "StartRouteStation")
                        .WithMany("StartRouteStationBookings")
                        .HasForeignKey("StartRouteStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndRouteStation");

                    b.Navigation("Promotion");

                    b.Navigation("StartRouteStation");

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "MessageRoom")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.BookingDetail", "MessageRoomId");

                    b.Navigation("Booking");

                    b.Navigation("MessageRoom");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetailDriver", b =>
                {
                    b.HasOne("Domain.Entities.BookingDetail", "BookingDetail")
                        .WithMany("BookingDetailDrivers")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Driver")
                        .WithMany("BookingDetailDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithOne("Fare")
                        .HasForeignKey("Domain.Entities.Fare", "VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.FareTimeline", b =>
                {
                    b.HasOne("Domain.Entities.Fare", "Fare")
                        .WithMany("FareTimelines")
                        .HasForeignKey("FareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fare");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("Promotion")
                        .HasForeignKey("Domain.Entities.Promotion", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithOne("PromotionCondition")
                        .HasForeignKey("Domain.Entities.PromotionCondition", "PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.HasOne("Domain.Entities.PromotionCondition", null)
                        .WithMany("UserPromotionConditions")
                        .HasForeignKey("PromotionConditionId");

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RouteRoutine", b =>
                {
                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("RouteRoutines")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RouteRoutines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RouteStation", b =>
                {
                    b.HasOne("Domain.Entities.RouteStation", "NextRouteStation")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.RouteStation", "NextRouteStationId");

                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("RouteStations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("RouteStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextRouteStation");

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Vehicle")
                        .HasForeignKey("Domain.Entities.Vehicle", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.AffiliateParty", b =>
                {
                    b.Navigation("AffiliateAccounts");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Navigation("Banner")
                        .IsRequired();

                    b.Navigation("Promotion")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Navigation("BookingDetailDrivers");
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.Navigation("FareTimelines");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PromotionCondition")
                        .IsRequired();

                    b.Navigation("PromotionUsers");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Navigation("UserPromotionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Navigation("RouteRoutines");

                    b.Navigation("RouteStations");
                });

            modelBuilder.Entity("Domain.Entities.RouteStation", b =>
                {
                    b.Navigation("EndRouteStationBookings");

                    b.Navigation("StartRouteStationBookings");
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Navigation("RouteStations");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BookingDetailDrivers");

                    b.Navigation("Bookings");

                    b.Navigation("Messages");

                    b.Navigation("PromotionUsers");

                    b.Navigation("RouteRoutines");

                    b.Navigation("UserRooms");

                    b.Navigation("Vehicle");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.VehicleType", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Fare")
                        .IsRequired();

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Navigation("AffiliateAccounts");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
