// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.Shares.Classes;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220927091115_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Registration", "RoleId")
                        .IsUnique()
                        .HasFilter("verified = true and deleted_at = null");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1167), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1168), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 1,
                            Verified = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1178), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1178), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 1,
                            Verified = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1187), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1187), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1195), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84837226239",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1196), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 5,
                            Verified = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1227), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1228), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1236), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1236), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1243), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1244), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1250), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1251), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 6,
                            Verified = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1257), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1258), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1265), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1266), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 3,
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1272), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "khoandse140977@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1273), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1280), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1280), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 7,
                            Verified = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1287), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1288), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1295), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1295), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 4,
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1303), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1304), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1310), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1311), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 8,
                            Verified = true
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1318), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1318), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 9,
                            Verified = true
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1356), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "loiqdse140970@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1357), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 9,
                            Verified = true
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1364), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "khoandse1409770@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1364), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 11,
                            Verified = true
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1371), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84914669962",
                            RegistrationType = 1,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1371), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 11,
                            Verified = false
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1379), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "duyttse140971@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1379), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 10,
                            Verified = true
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1386), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84376826328",
                            RegistrationType = 1,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1386), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 10,
                            Verified = false
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1393), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "datdtse140920@fpt.edu.vn",
                            RegistrationType = 0,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1393), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 12,
                            Verified = true
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1400), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Registration = "+84377322919",
                            RegistrationType = 1,
                            RoleId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1400), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UserId = 12,
                            Verified = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("6af38434-72ef-45f7-bbfb-0d75db155669"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(827), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(834), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("bad7335b-629f-4ebf-ad56-b1e04e7da381"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(846), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(847), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("21a6929b-aae3-417a-8218-1dcb77a006d5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(854), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(855), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("97c84ddb-bc3f-43b1-959b-24b44132b9e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(862), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(863), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("4856b197-8053-485c-a171-28d2b1d59901"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(870), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(870), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("d97c2af5-dd9d-4b79-949c-a876d94919c0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(928), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(929), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("8a4eeef4-d6f8-4732-87f9-7fb43e5cc584"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(938), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(939), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("3dc1ea86-06f8-405a-8942-c79379435726"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(946), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(947), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            Code = new Guid("9ad181e5-ffeb-409e-b8cd-eba1385b4ec6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(954), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "promotion/285640182_5344668362254863_4230282646432249568_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(955), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            Code = new Guid("352ff559-fd95-415d-9342-9aaacd406290"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(964), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "promotion/292718124_1043378296364294_8747140355237126885_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(964), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            Code = new Guid("63e3508b-a76f-4ed6-bcbf-324d90c67ba9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(972), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "promotion/300978304_2290809087749954_8259423704505319939_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(972), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            Code = new Guid("23dfeb52-fabf-4af0-83d6-28ae20ebcd6d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(980), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "promotion/300978304_2290809087749954_8259423704505319939_n.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(980), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 13,
                            Code = new Guid("988cb54a-f866-4759-b7a1-d25f1e5a20c5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(988), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Path = "user/avatar/default-user-avatar.png",
                            Status = true,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(989), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("banners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Content = "Banner 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2146), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 9,
                            Priority = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2147), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Content = "Banner 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2151), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 10,
                            Priority = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2151), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Content = "Banner 3",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2152), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 11,
                            Priority = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2153), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Content = "Banner 4",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2154), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 12,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2154), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("0dd3cf31-9f66-4be1-9fdf-78ef95240f0c"))
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_price");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<Guid>("EndStationCode")
                        .HasColumnType("uuid")
                        .HasColumnName("end_station_code");

                    b.Property<bool>("IsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_shared");

                    b.Property<int>("Option")
                        .HasColumnType("integer")
                        .HasColumnName("option");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PromotionId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<Guid>("StartStationCode")
                        .HasColumnType("uuid")
                        .HasColumnName("start_station_code");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PromotionId");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_price");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("feedback");

                    b.Property<int?>("MessageRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("message_room_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("DriverId");

                    b.HasIndex("MessageRoomId")
                        .IsUnique();

                    b.ToTable("booking_details", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseDistance")
                        .HasColumnType("integer")
                        .HasColumnName("base_distance");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_per_km");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId")
                        .IsUnique();

                    b.ToTable("fares", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseDistance = 2000,
                            BasePrice = 12000.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2217), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 4000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2218), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BaseDistance = 2000,
                            BasePrice = 20000.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2220), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 10000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2221), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BaseDistance = 2000,
                            BasePrice = 30000.0,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2222), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PricePerKm = 12000.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2223), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            VehicleTypeId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.FareTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<double>("ExtraFeePerKm")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_fee_per_km");

                    b.Property<int>("FareId")
                        .HasColumnType("integer")
                        .HasColumnName("fare_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FareId");

                    b.ToTable("fare_timelines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2236), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 0.12,
                            FareId = 1,
                            StartTime = new TimeOnly(6, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2236), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2309), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 1,
                            StartTime = new TimeOnly(8, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2311), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2319), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 0.14999999999999999,
                            FareId = 1,
                            StartTime = new TimeOnly(15, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2319), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2325), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 1,
                            StartTime = new TimeOnly(17, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2326), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2332), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 0.12,
                            FareId = 2,
                            StartTime = new TimeOnly(6, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2332), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2339), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 2,
                            StartTime = new TimeOnly(8, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2340), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2346), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 0.14999999999999999,
                            FareId = 2,
                            StartTime = new TimeOnly(15, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2346), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2352), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 2,
                            StartTime = new TimeOnly(17, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2353), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2359), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(8, 0, 0),
                            ExtraFeePerKm = 0.12,
                            FareId = 3,
                            StartTime = new TimeOnly(6, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2360), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2366), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(10, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 3,
                            StartTime = new TimeOnly(8, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2367), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2373), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(17, 0, 0),
                            ExtraFeePerKm = 0.14999999999999999,
                            FareId = 3,
                            StartTime = new TimeOnly(15, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2373), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2379), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            EndTime = new TimeOnly(19, 0, 0),
                            ExtraFeePerKm = 0.10000000000000001,
                            FareId = 3,
                            StartTime = new TimeOnly(17, 0, 0),
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2380), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("RoomId"), "hash");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<double>("MaxDecrease")
                        .HasColumnType("double precision")
                        .HasColumnName("max_decrease");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "HELLO2022",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1414), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for new user: Discount 20% with max decrease 200k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.20000000000000001,
                            FileId = 9,
                            MaxDecrease = 200000.0,
                            Name = "New User Promotion",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1415), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "BDAY2022",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1425), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for September: Discount 10% with max decrease 150k for the booking with minimum total price 200k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 10,
                            MaxDecrease = 150000.0,
                            Name = "Beautiful Month",
                            Status = 1,
                            Type = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1426), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "HOLIDAY",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1433), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for 2/9 Holiday: Discount 30% with max decrease 300k for the booking with minimum total price 1000k.",
                            DiscountPercentage = 0.29999999999999999,
                            MaxDecrease = 300000.0,
                            Name = "Holiday Promotion",
                            Status = 1,
                            Type = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1434), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "ABC",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1441), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for users booking alot: Discount 10% with max decrease 300k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 11,
                            MaxDecrease = 300000.0,
                            Name = "ABC Promotion",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1441), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = "VIRIDE2022",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1448), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for ViRide: Discount 10% with max decrease 100k for the booking with minimum total price 300k.",
                            DiscountPercentage = 0.10000000000000001,
                            FileId = 11,
                            MaxDecrease = 100000.0,
                            Name = "ViRide Promotion",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1449), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = "VICAR2022",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1456), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Details = "Promotion for ViCar: Discount 15% with max decrease 350k for the booking with minimum total price 500k.",
                            DiscountPercentage = 0.14999999999999999,
                            FileId = 11,
                            MaxDecrease = 350000.0,
                            Name = "ViCar Promotion",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1457), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("MinTickets")
                        .HasColumnType("integer")
                        .HasColumnName("min_tickets");

                    b.Property<float?>("MinTotalPrice")
                        .HasColumnType("real")
                        .HasColumnName("min_total_price");

                    b.Property<int?>("PaymentMethods")
                        .HasColumnType("integer")
                        .HasColumnName("payment_methods");

                    b.Property<int?>("PromotionId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<int?>("TotalUsage")
                        .HasColumnType("integer")
                        .HasColumnName("total_usage");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UsagePerUser")
                        .HasColumnType("integer")
                        .HasColumnName("usage_per_user");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTimeOffset?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.Property<int?>("VehicleTypes")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_types");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId")
                        .IsUnique();

                    b.ToTable("promotion_conditions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1467), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1467), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1573), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 200000f,
                            PromotionId = 2,
                            TotalUsage = 50,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1574), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 4,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 1000000f,
                            PromotionId = 3,
                            TotalUsage = 50,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1601), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 2, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1619), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTickets = 20,
                            MinTotalPrice = 500000f,
                            PromotionId = 4,
                            TotalUsage = 50,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1620), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 1,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 9, 2, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 9, 30, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1640), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 300000f,
                            PromotionId = 5,
                            TotalUsage = 500,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1641), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 3,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            VehicleTypes = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1661), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            MinTotalPrice = 500000f,
                            PromotionId = 6,
                            TotalUsage = 500,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1662), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            UsagePerUser = 3,
                            ValidFrom = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidUntil = new DateTimeOffset(new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            VehicleTypes = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset?>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<int?>("PromotionConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("used");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PromotionConditionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PromotionId", "UserId")
                        .IsUnique();

                    b.ToTable("promotion_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1684), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1685), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1757), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 10, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1758), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            Used = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1776), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            ExpiredTime = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 1, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1776), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            Used = 0,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1790), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            PromotionId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1791), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0,
                            Used = 2,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Role for driver",
                            Name = "DRIVER"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Role for booker",
                            Name = "BOOKER"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Role for admin",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("58088a2d-158c-46d3-9cd4-aee390eda865"))
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Bound>("Bound")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("bound");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<List<Step>>("Steps")
                        .IsRequired()
                        .HasColumnType("jsonb[]")
                        .HasColumnName("steps");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RouteRoutine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("route_routines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RouteStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DistanceFromFirstStationInRoute")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_from_first_station_in_route");

                    b.Property<double>("DurationFromFirstStationInRoute")
                        .HasColumnType("double precision")
                        .HasColumnName("duration_from_first_station_in_route");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int?>("NextRouteStationId")
                        .HasColumnType("integer")
                        .HasColumnName("next_route_station_id");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("StationId")
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("NextRouteStationId")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.HasIndex("StationId");

                    b.ToTable("route_stations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("stations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "80 Xa lộ Hà Nội, Bình An, Dĩ An, Bình Dương",
                            Code = new Guid("dadd9e41-84ea-48fc-8ecd-f974061aecd1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1813), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.879650683124561,
                            Longitude = 106.81402589177823,
                            Name = "Ga Metro Bến Xe Suối Tiên",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1814), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "39708 Xa lộ Hà Nội, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("1d33ba99-83cf-4f00-a07a-71a50edb8b9f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1818), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.8664854431366,
                            Longitude = 106.80126112015681,
                            Name = "Ga Metro Đại học Quốc Gia",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1818), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "4/16B Xa lộ Hà Nội, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("ecc80690-2272-4a8b-a7a9-2959445fa173"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1820), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.85917304306453,
                            Longitude = 106.78884645537156,
                            Name = "Ga Metro Công Viên Công Nghệ Cao",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1821), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "RQWC+GJX Xa lộ Hà Nội, Bình Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("265da289-c20a-4a1f-a3a1-573157584520"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1822), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.846402468851362,
                            Longitude = 106.77154946668446,
                            Name = "Ga Metro Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1823), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Address = "88 Nguyễn Văn Bá, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("9099ad96-984a-440f-9e9b-6063cf92e431"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1825), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.821402021794112,
                            Longitude = 106.75836408336727,
                            Name = "Ga Metro Phước Long",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1826), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Address = "RQ54+93V Xa lộ Hà Nội, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("bf94a90e-e784-449f-9695-e9295a2b8789"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1828), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.808505238748038,
                            Longitude = 106.75523952123311,
                            Name = "Ga Metro Gạch Chiếc",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1829), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Address = "RP2R+VV9 Xa lộ Hà Nội, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("2acff3c5-6013-49a0-8662-9d1842d616a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1831), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.802254217820691,
                            Longitude = 106.74223332879555,
                            Name = "Ga Metro An Phú",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1832), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Address = "763J Quốc Hương, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("faa27d6d-8586-4e92-b986-43ba6e9ce795"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1833), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.800728306627473,
                            Longitude = 106.73370791313042,
                            Name = "Ga Metro Thảo Điền",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1834), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            Address = "QPXF+C8J Nguyễn Hữu Cảnh, 25, Bình Thạnh, Thành phố Hồ Chí Minh, Việt Nam",
                            Code = new Guid("6fcbfef7-6785-4e3b-b200-1c325f9b15b5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1838), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.798621063183687,
                            Longitude = 106.72327125155881,
                            Name = "Ga Metro Tân Cảng",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1838), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            Address = "QPW8+C5Q, Phường 22, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("e7931b65-2ab6-4b29-975d-9ebd11a51ad1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1842), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.796160596763055,
                            Longitude = 106.71548797723645,
                            Name = "Ga Metro Khu du lịch Văn Thánh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1842), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            Address = "39761 Nguyễn Văn Bá, Phước Long B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("eb1c8732-9cb6-4ab5-80ec-4b9958a5f479"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1844), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.836558412392224,
                            Longitude = 106.76576466834388,
                            Name = "Ga Metro Bình Thái",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1845), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("6017bff4-0d90-4de7-8907-cac1618d9fd3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1847), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.855748533595877,
                            Longitude = 106.78914067676806,
                            Name = "AI InnovationHub",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1847), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 13,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("9a9bec4f-facd-4b70-95ef-a9f7a9f16b40"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1849), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.853144521692798,
                            Longitude = 106.79643313765459,
                            Name = "Tòa nhà HD Bank",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1849), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 14,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh ",
                            Code = new Guid("3f0f9c9b-ff88-4f35-94fa-464e9ccb726e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1852), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.851138424399943,
                            Longitude = 106.79857191639908,
                            Name = "FPT Software - Ftown 1,2",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1852), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 15,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("6d4453ee-b95e-44ef-9f6f-e6059b0f6c44"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1854), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.842755223277589,
                            Longitude = 106.80737654998441,
                            Name = "Tòa nhà VPI phía Nam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1855), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 16,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("1fd81d53-0430-48c3-a857-ffab5b79c05f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1857), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.841160382489567,
                            Longitude = 106.80898373894351,
                            Name = "Viện công nghệ cao Hutech",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1858), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 17,
                            Address = "RRP7+CJ7 đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("b8e67e0c-480b-434c-8444-c4ad04397515"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1861), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.836238463608794,
                            Longitude = 106.814245107947,
                            Name = "Cổng Jabil Việt Nam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1862), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 18,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("ac1b1970-a3c8-422c-846b-f396078b08a5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1864), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.832233088594503,
                            Longitude = 106.82046132230808,
                            Name = "Saigon Silicon",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1865), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 19,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("f9c6e8d4-b094-4cc5-9a76-204bbbf3f7fb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1866), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.836776238894464,
                            Longitude = 106.81401100053891,
                            Name = "ISMARTCITY (ISC)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1867), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 20,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("6912c59b-4f3c-46dc-9991-ded0fa31a849"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1869), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.840578398658391,
                            Longitude = 106.8099978721756,
                            Name = "Trường đại học FPT",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1869), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 21,
                            Address = "Đường D1, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("9a389bb7-1645-476a-a84f-54a3894a71df"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1871), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.84578835745819,
                            Longitude = 106.80454376198392,
                            Name = "Công Ty CP Công Nghệ Sinh Học Dược Nanogen",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1872), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 22,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("a47b6aa6-641e-4380-8ca4-98530a671ac6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1875), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.853375488919204,
                            Longitude = 106.79658230436019,
                            Name = "Intel VietNam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1875), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 88,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("2ddbf227-6622-4726-b41d-9533d66c0206"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1877), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.854367872934622,
                            Longitude = 106.79375338625633,
                            Name = "Nidec VietNam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1878), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 23,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("c94a0a27-f3af-4c85-acf9-d928d3a1c96f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1881), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.854860900718421,
                            Longitude = 106.79189382870402,
                            Name = "CMC Data Center",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1881), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 24,
                            Address = "Đường D1, Tân Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("db00b1bb-0855-4a49-9d88-db156d24627a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1886), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.856082809107784,
                            Longitude = 106.78924956530844,
                            Name = "Inverter ups Sài Gòn",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1886), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 25,
                            Address = "Đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("dfe1fa5e-4d18-468d-a530-d50daab12138"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1889), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.838027429470513,
                            Longitude = 106.81035219090674,
                            Name = "Trường đại học Nguyễn Tất Thành",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1889), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 26,
                            Address = "Đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("214d1afb-64ce-438e-8216-ae5d41f4357f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1891), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.834922120966135,
                            Longitude = 106.80776601621393,
                            Name = "FPT Software - Ftown 3",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1892), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 27,
                            Address = "RRM4+VMQ đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("0ddd380c-f1e4-45d1-80fd-a9b8a2bc8276"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1893), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.834215900566933,
                            Longitude = 106.80727419233645,
                            Name = "Công ty Cổ phần Hàng không VietJet",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1894), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 28,
                            Address = "RRJ4+X9F đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("3a19f888-fc4b-4264-8ac3-7d239f17a020"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1895), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.832245246386895,
                            Longitude = 106.80598499131753,
                            Name = "Sài Gòn Trapoco",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1896), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 29,
                            Address = "RRJ4+G2J đường Võ Chí Công, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("d6759675-ed84-435f-996c-f9e920f08cd5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1898), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.830911650064834,
                            Longitude = 106.80503995362199,
                            Name = "Công ty kỹ thuật công nghệ cao sài gòn",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1898), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 30,
                            Address = "Đường D2, Tăng Nhơn Phú B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("a3879b38-3a08-4976-915c-df3b619085cb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1900), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.825858875527519,
                            Longitude = 106.79860212469366,
                            Name = "Nhà máy Samsung Khu CNC",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1900), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 31,
                            Address = "Đường D2, Tăng Nhơn Phú B, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("cffc2377-b973-4adc-a824-c40398c18bc4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1902), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.826685687856866,
                            Longitude = 106.8001755286645,
                            Name = "Công ty công nghệ cao Điện Quang",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1903), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 32,
                            Address = "G23 Lã Xuân Oai, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("8cf06b55-d0b0-4ec7-b409-411ff2a529c5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1907), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.829932294153192,
                            Longitude = 106.80446003004153,
                            Name = "Công ty Thảo Dược Việt Nam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1907), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 33,
                            Address = "1-2 đường D2, Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("e8636fe0-a93b-4bb0-a82a-a6d7d80e2ed5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1957), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.830577375598693,
                            Longitude = 106.80512235256614,
                            Name = "Công ty Daihan Vina",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1958), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 34,
                            Address = "VQ8Q+W5W QL 1A, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("3abf9fa4-6ba1-4f4d-a777-1f8fff1b1e1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1961), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.867306661370069,
                            Longitude = 106.78773791444128,
                            Name = "Trường Đại học Nông Lâm",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1961), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 35,
                            Address = "QL 1A, Linh Xuân, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("c059539e-6ef5-4168-a785-db77576e8624"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1964), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.869235667646493,
                            Longitude = 106.77793783791677,
                            Name = "Trường đại học Kinh Tế Luật",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1964), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 36,
                            Address = "VRC2+QR9, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("567e06b5-78df-4076-b0b5-1dde7868c7e8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1966), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.871997549994893,
                            Longitude = 106.80277007274188,
                            Name = "Đại học Khoa học Xã hội và Nhân văn",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1966), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 37,
                            Address = "VRF2+XFW đường Quảng Trường Sáng Tạo, Đông Hoà, Dĩ An, Bình Dương",
                            Code = new Guid("0177e699-dfb7-41b5-aa0c-f9f8a5e51836"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1968), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.875092307642346,
                            Longitude = 106.80144678877895,
                            Name = "Nhà Văn Hóa Sinh Viên ĐHQG",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1969), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 38,
                            Address = "Đường Hàn Thuyên, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("1e7cf593-de2e-47aa-a47e-5ff8e4b18415"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1970), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.870481440652956,
                            Longitude = 106.80198596270417,
                            Name = "Cổng A - Trường đại học Công Nghệ Thông Tin",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1971), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 39,
                            Address = "VQCW+FG2, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("97650cb2-88ea-475c-a57d-1a65d0870221"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1973), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.870503469555034,
                            Longitude = 106.79628492520538,
                            Name = "Trường đại học Thể dục Thể thao",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1973), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 40,
                            Address = "Đường T1, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("ec12a551-e8c7-4dc4-b9a1-b010f3ea69a9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1977), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.875477130935243,
                            Longitude = 106.79903376051722,
                            Name = "Trường đại học Khoa học Tự nhiên (cơ sở Linh Trung)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1977), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 41,
                            Address = "Đường Quảng Trường Sáng Tạo, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("cefab67c-7461-4ec4-83aa-9ad95a5e42cd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1979), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.876446815885343,
                            Longitude = 106.80177999819321,
                            Name = "Trường đại học Quốc Tế",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1980), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 42,
                            Address = "Đường Tạ Quang Bửu, Linh Trung, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("ec0af04e-a025-4f98-b728-e1ea84edfa44"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1981), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.878197830285536,
                            Longitude = 106.80614795287057,
                            Name = "Cổng kí túc xá khu A (đại học quốc gia TP Hồ Chí Minh)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1982), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 43,
                            Address = "Đường Tạ Quang Bửu, Đông Hòa, Dĩ An, Bình Dương",
                            Code = new Guid("f4a7426c-89ef-4007-8611-0918131f3cb1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1983), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.879768516539494,
                            Longitude = 106.80697880277312,
                            Name = "Trường đại học Bách Khoa (cơ sở 2)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1984), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 44,
                            Address = "Đường Tạ Quang Bửu, Đông Hòa, Dĩ An, Bình Dương",
                            Code = new Guid("381cbde4-a465-4f55-afb4-51ba3b3d492e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1985), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.877545337230165,
                            Longitude = 106.80552329008295,
                            Name = "Trung tâm ngoại ngữ đại học Bách Khoa (BK English)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1986), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 45,
                            Address = "Số 1 đường Võ Văn Ngân, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("d8996fff-fe1e-481e-ba9d-edc020c6a94f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1988), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.849721027334326,
                            Longitude = 106.77164269167564,
                            Name = "Trường đại học Sư phạm Kĩ thuật Thành phố Hồ Chí Minh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1988), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 46,
                            Address = "VQ25+JWQ đường Chương Dương, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("47648932-f731-41ab-90c6-f72abdb6ab7d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1991), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.851623294286195,
                            Longitude = 106.7599477126918,
                            Name = "Trường Cao đẳng Công nghệ Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1991), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 50,
                            Address = "26 đường Chương Dương, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("35ba57c4-3c92-4959-9762-030b5964f237"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1993), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.852653003274197,
                            Longitude = 106.76018734231964,
                            Name = "Trung tâm thể dục thể thao Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1994), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 51,
                            Address = "19A đường số 17, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("c8e1a038-2b26-4f10-b5be-64b710957d4d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1997), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.854723648720167,
                            Longitude = 106.76032173572378,
                            Name = "Trường Cao đẳng Nghề Thành phố Hồ Chí Minh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1998), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 52,
                            Address = "VQ46+9J3 đường số 17, Linh Chiểu, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("33b53502-e79a-41c8-a01a-2c9b5cdef3df"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1999), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.855800383594074,
                            Longitude = 106.76151598927879,
                            Name = "Trường đại học Ngân hàng",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2000), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 53,
                            Address = "356 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("e230501f-b4e5-4c83-ab04-4f900c9305e8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2001), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.83090741994997,
                            Longitude = 106.76359240459003,
                            Name = "Trường đại học Điện Lực",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2002), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 54,
                            Address = "360 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("9e40c567-c0e4-45a0-93ae-0875fb28908f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2003), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.831781684548069,
                            Longitude = 106.76462343340792,
                            Name = "Metro Star - Quận 9 | Tập đoàn CT Group+",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2004), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 55,
                            Address = "354-356B Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("4a1101ef-bf51-4b27-be31-604e836bb160"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2006), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.830438851236304,
                            Longitude = 106.76388396745739,
                            Name = "Chi nhánh công ty CyberTech Việt Nam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2006), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 56,
                            Address = "RQH7+XP4 Xa lộ, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("e01c1d7b-94dc-4d01-aeaa-44766726534e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2008), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.829834904338366,
                            Longitude = 106.76426274528296,
                            Name = "Zenpix Việt Nam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2008), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 57,
                            Address = "12 Đặng Văn Bi, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("be2379f3-b5d1-493d-b713-af4eacfdfab9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2010), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.840946385700587,
                            Longitude = 106.76509820241216,
                            Name = "Nhà máy sữa Thống Nhất (Vinamilk)",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2011), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 58,
                            Address = "10/42 đường Số 4, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("231a0d2b-cdc9-41ad-b6f1-24d4ba88a762"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2013), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.840432688988782,
                            Longitude = 106.76088713432273,
                            Name = "Công ty xuất nhập khẩu Tây Tiến",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2013), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 59,
                            Address = "102 Đặng Văn Bi, Bình Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("59def10c-49ac-4d96-9a4a-8e8360c158cb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2018), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.844257732572313,
                            Longitude = 106.76276736279874,
                            Name = "Trung tâm tiêm chủng vắc xin VNVC",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2018), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 60,
                            Address = "Km9 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("810b6f03-c260-4d0d-887d-658c9ad24964"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2020), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.825780208240717,
                            Longitude = 106.75924170740572,
                            Name = "Công ty cổ phần Thép Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2020), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 61,
                            Address = "Km9 Xa lộ Hà Nội, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("49e859ff-adab-41e9-8288-0d63b06067e4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2023), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.82825779372371,
                            Longitude = 106.76092968863129,
                            Name = "Công Ty Cổ Phần Cơ Điện Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2023), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 62,
                            Address = "RQH5+324 đường Số 1, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("2ba583be-850a-4c68-9f72-688c270d8174"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2025), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.827423240919156,
                            Longitude = 106.75761821078893,
                            Name = "Công ty TNHH Nhiệt điện Thủ Đức",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2026), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 63,
                            Address = "Đường Số 1, Trường Thọ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("4eb57e34-0f15-4d48-b401-157098d251d8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2032), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.827933659643358,
                            Longitude = 106.75322566624341,
                            Name = "Cảng Trường Thọ",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2033), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 64,
                            Address = "96 Nam Hòa, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("494dc0f8-4b3b-4499-80e7-4510dd590816"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2034), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.82037580579453,
                            Longitude = 106.75928223003976,
                            Name = "Công ty TNHH BeuHomes",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2035), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 65,
                            Address = "9 Nam Hòa, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("b9c3be56-bc22-4990-b693-7a6180a1d667"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2037), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.821744734671684,
                            Longitude = 106.76019934624064,
                            Name = "Công ty TNHH Creative Engineering",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2037), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 66,
                            Address = "22/15 đường số 440, Phước Long A, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("8ccb1ad4-06d9-49a4-ae59-d123f25ab3c9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2039), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.82220109625001,
                            Longitude = 106.75952721927021,
                            Name = "Công Ty Công Nghệ Trí Tuệ Nhân Tạo AITT",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2040), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 67,
                            Address = "628C Xa lộ Hà Nội, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("7ee8d2f4-9530-4aa3-9a72-33cce7914632"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2043), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.805200229819087,
                            Longitude = 106.75206770837505,
                            Name = "Golfzon Park Thảo Điền",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2043), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 68,
                            Address = "Đường Giang Văn Minh, An Phú, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("0c2b7ec6-ad15-4de2-be0a-bba5466af456"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2047), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.803332925851043,
                            Longitude = 106.7488580702081,
                            Name = "Saigon Town and Country Club",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2047), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 69,
                            Address = "30 đường số 11, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("eab0248a-ba0c-46f8-bb53-72566f99eeb9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2049), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.804563036954756,
                            Longitude = 106.74393815975716,
                            Name = "The Nassim Thảo Điền",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2049), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 70,
                            Address = "RP4W+V3J đường Mai Chí Thọ, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("526dc8ba-9536-475d-ba5c-97ad30ba40b2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2051), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.807262850388623,
                            Longitude = 106.74530677686282,
                            Name = "Blue Mangoo Software",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2051), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 71,
                            Address = "51 đường Quốc Hương, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("eee194f4-6f17-4a4f-8dc7-6005b8c0857f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2053), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.805401459108982,
                            Longitude = 106.73134189331353,
                            Name = "Trường Đại học Văn hóa TP.HCM - Cơ sở 1",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2054), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 72,
                            Address = "6-6A 8 đường số 44, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("3a3ada3f-3f87-4e05-a7df-62a68ba382e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2055), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.806048021383644,
                            Longitude = 106.72928364712546,
                            Name = "Trường song ngữ quốc tế Horizon",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2056), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 73,
                            Address = "45 đường số 44, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("17942cbe-62a6-499a-b9e6-b31bc9f9a272"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2058), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.809270864831371,
                            Longitude = 106.72846844993934,
                            Name = "Công Ty TNHH Dịch Vụ Địa Ốc Thảo Điền",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2058), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 74,
                            Address = "40 đường Nguyễn Văn Hưởng, Thảo Điền, Thành phố Thủ Đức, Thành Phố Hồ Chí Minh",
                            Code = new Guid("73410641-89be-4baa-8b6f-3f178f866787"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2086), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.806246963358644,
                            Longitude = 106.72589627507526,
                            Name = "Công Ty TNHH Một Thành Viên Ánh Sáng Hoàng ĐP",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2087), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 75,
                            Address = "1 đường Xuân Thủy, Thảo Điền, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("7c78a6fa-0985-4eea-9616-4fc12b8d915f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2091), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.803458791026568,
                            Longitude = 106.72806621661472,
                            Name = "Trường đại học Quốc Tế Thành phố Hồ Chí Minh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2091), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 76,
                            Address = "91B đường Trần Não, Bình Khánh, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("16b497c8-6ff1-416d-885d-54b8b79f6b55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2093), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.797897644669561,
                            Longitude = 106.73143206816108,
                            Name = "SCB Trần Não - Ngân hàng TMCP Sài Gòn",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2093), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 77,
                            Address = "6 đường số 26, Bình Khánh, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("b6f19b06-3764-45b7-9187-49b5c878478f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2096), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.793905585531592,
                            Longitude = 106.7293406127999,
                            Name = "Công Ty TNHH Xuất Nhập Khẩu Máy Móc Và Phụ Tùng Ô Tô Hưng Thịnh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2096), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 78,
                            Address = "220 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("04302dfc-18d7-437c-91d2-0ff691184a7d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2098), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.789891277804319,
                            Longitude = 106.72895399848618,
                            Name = "Tòa nhà Microspace Building",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2098), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 79,
                            Address = "18/2 đường số 35, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("a460fff1-1fd5-474d-b609-2561a03c056b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2100), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.786711346588366,
                            Longitude = 106.72783903612815,
                            Name = "Công ty TNHH vận tải - thi công cơ giới Xuân Thao",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2101), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 80,
                            Address = "9 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("d41ee5e2-f330-4a5d-b119-396869516496"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2102), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.780549913195312,
                            Longitude = 106.72849002239546,
                            Name = "Công Ty TNHH Ch Resource Vietnam",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2103), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 81,
                            Address = "10 đường số 39, Bình Trưng Tây, Thành Phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("35e89a1f-283a-4a34-9a03-bbe30d1a4a69"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2105), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.786744237747117,
                            Longitude = 106.72969521262236,
                            Name = "Công Ty TNHH Thương Mại Và Dịch Vụ Nhật Vượng",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2105), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 82,
                            Address = "125 đường Trần Não, Bình An, Thành phố Thủ Đức, Thành phố Hồ Chí Minh",
                            Code = new Guid("c5879680-bc02-48da-a92f-01cb5239669f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2107), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.792554668741762,
                            Longitude = 106.73067177064897,
                            Name = "Ngân hàng TMCP Kỹ thương Việt Nam (Techcombank)- Chi nhánh Gia Định - PGD Trần Não",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2107), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 83,
                            Address = "25 Ung Văn Khiêm, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("71e40a63-89aa-4283-a7fc-79845bf665ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2111), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.798737294717368,
                            Longitude = 106.72126763097279,
                            Name = "Tòa Nhà Melody Tower, Cty Toi",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2111), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 84,
                            Address = "561A đường Điện Biên Phủ, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("53dc110c-23e5-4e40-91ca-77a02fe496f0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2113), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.799795706410299,
                            Longitude = 106.71843607604076,
                            Name = "Pearl Plaza Văn Thánh",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2113), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 85,
                            Address = "15 Nguyễn Văn Thương, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("5e7b8ddf-84c2-4897-bcd8-00f7ba85eac5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2115), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.802303255825205,
                            Longitude = 106.71812789316297,
                            Name = "Căn hộ Wilton Tower",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2116), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 86,
                            Address = "02 Võ Oanh, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("74381de4-cc81-45be-924a-72adef8d00d4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2117), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.804470786914793,
                            Longitude = 106.7167285754774,
                            Name = "Trường đại học Giao Thông Vận Tải",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2118), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 87,
                            Address = "15 Đường D5, Phường 25, Bình Thạnh, Thành phố Hồ Chí Minh",
                            Code = new Guid("744fd3a5-d00f-4b8c-8d6c-606f8ef1ca49"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2120), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Latitude = 10.806564326384949,
                            Longitude = 106.71296786250547,
                            Name = "Trường Đại học Ngoại thương - Cơ sở 2",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2120), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("2e12af10-02d5-4d84-910a-25b646ad698f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1009), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 1,
                            Gender = 1,
                            Name = "Quach Dai Loi",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1009), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("f8ced167-c683-44c4-a592-1b5b8ab185e4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1024), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 2,
                            Gender = 1,
                            Name = "Do Trong Dat",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1025), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("975332fa-bf28-42e7-a0fd-c2d2af66f4bb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1034), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 3,
                            Gender = 1,
                            Name = "Nguyen Dang Khoa",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1034), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("1a6f37bb-5f7a-4815-a33f-ed74609f9908"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1043), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 4,
                            Gender = 1,
                            Name = "Than Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1043), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("28dfa905-f176-45c9-9d3f-555d44d264b9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1054), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 5,
                            Gender = 1,
                            Name = "Loi Quach",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1054), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("b1409614-a1a7-4835-bd83-3ad17456d3d9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1064), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 6,
                            Gender = 1,
                            Name = "Dat Do",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1065), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("79de073c-59bd-461b-89f9-c206891f5528"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1073), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 7,
                            Gender = 1,
                            Name = "Khoa Nguyen",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1074), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("08492238-286a-483f-90f2-f0d3917756b9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1083), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 8,
                            Gender = 1,
                            Name = "Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1083), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 9,
                            Code = new Guid("235e51b1-1598-4d29-975b-009a8b6b921a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1094), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            FileId = 13,
                            Gender = 1,
                            Name = "Admin Quach Dai Loi",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1094), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 10,
                            Code = new Guid("b59ac6bf-7d2f-485d-b470-cf8d2cebb0c7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1135), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Than Thanh Duy",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1136), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 11,
                            Code = new Guid("5c26350d-dde9-4c09-8260-67efed2601fe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1145), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Nguyen Dang Khoa",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1146), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 12,
                            Code = new Guid("fb426fa4-340b-4ef0-813d-a691bbf519c6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1154), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Gender = 1,
                            Name = "Admin Do Trong Dat",
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(1155), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("LastSeenTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 684, DateTimeKind.Unspecified).AddTicks(9792), new TimeSpan(0, 7, 0, 0, 0)))
                        .HasColumnName("last_seen_time");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("user_rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("vehicle_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("01779e4f-7ff5-4e40-bf9c-fb94562c43c0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2183), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "ViRide",
                            Slot = 2,
                            Status = 0,
                            Type = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2184), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("ab348ccf-016d-45b4-a831-20f247247074"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2197), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "ViCar-4",
                            Slot = 4,
                            Status = 0,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2198), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("6507094d-7c24-44cb-b6ac-614244708d35"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2211), new TimeSpan(0, 7, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "ViCar-7",
                            Slot = 7,
                            Status = 0,
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 9, 27, 16, 11, 14, 689, DateTimeKind.Unspecified).AddTicks(2211), new TimeSpan(0, 7, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.VerifiedCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("ExpiredTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_time");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registration");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer")
                        .HasColumnName("registration_type");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("verified_codes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("Banner")
                        .HasForeignKey("Domain.Entities.Banner", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("Bookings")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Route");

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Driver")
                        .WithMany("BookingDetails")
                        .HasForeignKey("DriverId");

                    b.HasOne("Domain.Entities.Room", "MessageRoom")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.BookingDetail", "MessageRoomId");

                    b.Navigation("Booking");

                    b.Navigation("Driver");

                    b.Navigation("MessageRoom");
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithOne("Fare")
                        .HasForeignKey("Domain.Entities.Fare", "VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.FareTimeline", b =>
                {
                    b.HasOne("Domain.Entities.Fare", "Fare")
                        .WithMany("FareTimelines")
                        .HasForeignKey("FareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fare");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("Promotion")
                        .HasForeignKey("Domain.Entities.Promotion", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithOne("PromotionCondition")
                        .HasForeignKey("Domain.Entities.PromotionCondition", "PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.PromotionUser", b =>
                {
                    b.HasOne("Domain.Entities.PromotionCondition", null)
                        .WithMany("UserPromotionConditions")
                        .HasForeignKey("PromotionConditionId");

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RouteRoutine", b =>
                {
                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("RouteRoutines")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RouteRoutines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RouteStation", b =>
                {
                    b.HasOne("Domain.Entities.RouteStation", "NextRouteStation")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.RouteStation", "NextRouteStationId");

                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("RouteStations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("RouteStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextRouteStation");

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.AppFile", "File")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.UserRoom", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Vehicle")
                        .HasForeignKey("Domain.Entities.Vehicle", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Navigation("Banner")
                        .IsRequired();

                    b.Navigation("Promotion")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Domain.Entities.Fare", b =>
                {
                    b.Navigation("FareTimelines");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PromotionCondition")
                        .IsRequired();

                    b.Navigation("PromotionUsers");
                });

            modelBuilder.Entity("Domain.Entities.PromotionCondition", b =>
                {
                    b.Navigation("UserPromotionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RouteRoutines");

                    b.Navigation("RouteStations");
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Navigation("RouteStations");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BookingDetails");

                    b.Navigation("Bookings");

                    b.Navigation("Messages");

                    b.Navigation("PromotionUsers");

                    b.Navigation("RouteRoutines");

                    b.Navigation("UserRooms");

                    b.Navigation("Vehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.VehicleType", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Fare")
                        .IsRequired();

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
